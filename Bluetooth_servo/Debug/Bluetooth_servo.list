
Bluetooth_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ec0  08001ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ec8  08001ec8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ec8  08001ec8  00011ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ecc  08001ecc  00011ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08001edc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001edc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afdb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001740  00000000  00000000  0002b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022804  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca3  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc837  00000000  00000000  0005ae87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001276be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002864  00000000  00000000  00127710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001e90 	.word	0x08001e90

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001e90 	.word	0x08001e90

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN4HC05C1EP11pinStruct_tP13USART_TypeDefmmm>:
 *      Author: barbog
 */

#include "hc05.h"

HC05::HC05(pinStruct_t* uartPin,
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
		   uint32_t baudRate,
		   uint32_t gpioAFSelUSARTx,
		   uint32_t mode)
{
	// GPIO config
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = uartPin->selectedPin;
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	889b      	ldrh	r3, [r3, #4]
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = gpioAFSelUSARTx;
 8000538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uartPin->port, &GPIO_InitStruct);
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f107 0214 	add.w	r2, r7, #20
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fb82 	bl	8000c50 <HAL_GPIO_Init>

	// UART config
    huart.Instance = USARTx;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = baudRate;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = mode;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800056e:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f987 	bl	8001892 <HAL_UART_Init>
}
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4618      	mov	r0, r3
 8000588:	3728      	adds	r7, #40	; 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_ZN4HC057GetCharEv>:

char HC05::GetChar(void)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	// wait fo rx buffer to be full, then read data
	while((huart.Instance->SR & USART_SR_RXNE) != USART_SR_RXNE) {}
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 0320 	and.w	r3, r3, #32
 80005a0:	2b20      	cmp	r3, #32
 80005a2:	bf14      	ite	ne
 80005a4:	2301      	movne	r3, #1
 80005a6:	2300      	moveq	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d000      	beq.n	80005b0 <_ZN4HC057GetCharEv+0x22>
 80005ae:	e7f2      	b.n	8000596 <_ZN4HC057GetCharEv+0x8>
	return huart.Instance->DR;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	b2db      	uxtb	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <main>:
#include "hc05.h"

char bluetoothData = '\0';

int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af02      	add	r7, sp, #8
	HAL_Init();
 80005ca:	f000 f9ed 	bl	80009a8 <HAL_Init>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b81      	ldr	r3, [pc, #516]	; (80007d8 <main+0x214>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a80      	ldr	r2, [pc, #512]	; (80007d8 <main+0x214>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b7e      	ldr	r3, [pc, #504]	; (80007d8 <main+0x214>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM4_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b7a      	ldr	r3, [pc, #488]	; (80007d8 <main+0x214>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	4a79      	ldr	r2, [pc, #484]	; (80007d8 <main+0x214>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
 80005fa:	4b77      	ldr	r3, [pc, #476]	; (80007d8 <main+0x214>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b73      	ldr	r3, [pc, #460]	; (80007d8 <main+0x214>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a72      	ldr	r2, [pc, #456]	; (80007d8 <main+0x214>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b70      	ldr	r3, [pc, #448]	; (80007d8 <main+0x214>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b6c      	ldr	r3, [pc, #432]	; (80007d8 <main+0x214>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a6b      	ldr	r2, [pc, #428]	; (80007d8 <main+0x214>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b69      	ldr	r3, [pc, #420]	; (80007d8 <main+0x214>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

	pinStruct_t servoPin = {GPIOB, GPIO_PIN_8};
 800063e:	4a67      	ldr	r2, [pc, #412]	; (80007dc <main+0x218>)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000648:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t uartRxPin = {GPIOA, GPIO_PIN_10};
 800064c:	4a64      	ldr	r2, [pc, #400]	; (80007e0 <main+0x21c>)
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000656:	e883 0003 	stmia.w	r3, {r0, r1}
	static Servo servo(&servoPin, TIM4, GPIO_AF2_TIM4, TIM_CHANNEL_3);
 800065a:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <main+0x220>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f3bf 8f5b 	dmb	ish
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d016      	beq.n	80006a4 <main+0xe0>
 8000676:	485b      	ldr	r0, [pc, #364]	; (80007e4 <main+0x220>)
 8000678:	f001 fbd6 	bl	8001e28 <__cxa_guard_acquire>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00b      	beq.n	80006a4 <main+0xe0>
 800068c:	f107 0118 	add.w	r1, r7, #24
 8000690:	2308      	movs	r3, #8
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	4a54      	ldr	r2, [pc, #336]	; (80007e8 <main+0x224>)
 8000698:	4854      	ldr	r0, [pc, #336]	; (80007ec <main+0x228>)
 800069a:	f000 f8b7 	bl	800080c <_ZN5ServoC1EP11pinStruct_tP11TIM_TypeDefhh>
 800069e:	4851      	ldr	r0, [pc, #324]	; (80007e4 <main+0x220>)
 80006a0:	f001 fbce 	bl	8001e40 <__cxa_guard_release>
	static HC05 hc05(&uartRxPin, USART1, 9600, GPIO_AF7_USART1, UART_MODE_RX);
 80006a4:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <main+0x22c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f3bf 8f5b 	dmb	ish
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d019      	beq.n	80006f4 <main+0x130>
 80006c0:	484b      	ldr	r0, [pc, #300]	; (80007f0 <main+0x22c>)
 80006c2:	f001 fbb1 	bl	8001e28 <__cxa_guard_acquire>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00e      	beq.n	80006f4 <main+0x130>
 80006d6:	f107 0110 	add.w	r1, r7, #16
 80006da:	2304      	movs	r3, #4
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2307      	movs	r3, #7
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80006e6:	4a43      	ldr	r2, [pc, #268]	; (80007f4 <main+0x230>)
 80006e8:	4843      	ldr	r0, [pc, #268]	; (80007f8 <main+0x234>)
 80006ea:	f7ff ff0d 	bl	8000508 <_ZN4HC05C1EP11pinStruct_tP13USART_TypeDefmmm>
 80006ee:	4840      	ldr	r0, [pc, #256]	; (80007f0 <main+0x22c>)
 80006f0:	f001 fba6 	bl	8001e40 <__cxa_guard_release>

	while(1)
	{
		bluetoothData = hc05.GetChar();
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <main+0x234>)
 80006f6:	f7ff ff4a 	bl	800058e <_ZN4HC057GetCharEv>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <main+0x238>)
 8000700:	701a      	strb	r2, [r3, #0]
		switch (bluetoothData) {
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <main+0x238>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3b4c      	subs	r3, #76	; 0x4c
 8000708:	2b26      	cmp	r3, #38	; 0x26
 800070a:	d863      	bhi.n	80007d4 <main+0x210>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <main+0x150>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	080007b1 	.word	0x080007b1
 8000718:	080007bd 	.word	0x080007bd
 800071c:	080007d5 	.word	0x080007d5
 8000720:	080007d5 	.word	0x080007d5
 8000724:	080007d5 	.word	0x080007d5
 8000728:	080007d5 	.word	0x080007d5
 800072c:	080007c9 	.word	0x080007c9
 8000730:	080007d5 	.word	0x080007d5
 8000734:	080007d5 	.word	0x080007d5
 8000738:	080007d5 	.word	0x080007d5
 800073c:	080007d5 	.word	0x080007d5
 8000740:	080007d5 	.word	0x080007d5
 8000744:	080007d5 	.word	0x080007d5
 8000748:	080007d5 	.word	0x080007d5
 800074c:	080007d5 	.word	0x080007d5
 8000750:	080007d5 	.word	0x080007d5
 8000754:	080007d5 	.word	0x080007d5
 8000758:	080007d5 	.word	0x080007d5
 800075c:	080007d5 	.word	0x080007d5
 8000760:	080007d5 	.word	0x080007d5
 8000764:	080007d5 	.word	0x080007d5
 8000768:	080007d5 	.word	0x080007d5
 800076c:	080007d5 	.word	0x080007d5
 8000770:	080007d5 	.word	0x080007d5
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007d5 	.word	0x080007d5
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007d5 	.word	0x080007d5
 8000784:	080007d5 	.word	0x080007d5
 8000788:	080007d5 	.word	0x080007d5
 800078c:	080007d5 	.word	0x080007d5
 8000790:	080007d5 	.word	0x080007d5
 8000794:	080007b1 	.word	0x080007b1
 8000798:	080007bd 	.word	0x080007bd
 800079c:	080007d5 	.word	0x080007d5
 80007a0:	080007d5 	.word	0x080007d5
 80007a4:	080007d5 	.word	0x080007d5
 80007a8:	080007d5 	.word	0x080007d5
 80007ac:	080007c9 	.word	0x080007c9
			case 'l':
			case 'L':
				servo.TurnShafts(SERVO_LEFTPOSITION);
 80007b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <main+0x228>)
 80007b6:	f000 f88e 	bl	80008d6 <_ZN5Servo10TurnShaftsEm>
				break;
 80007ba:	e00c      	b.n	80007d6 <main+0x212>
			case 'm':
			case 'M':
				servo.TurnShafts(SERVO_MIDPOSITION);
 80007bc:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <main+0x228>)
 80007c2:	f000 f888 	bl	80008d6 <_ZN5Servo10TurnShaftsEm>
				break;
 80007c6:	e006      	b.n	80007d6 <main+0x212>
			case 'r':
			case 'R':
				servo.TurnShafts(SERVO_RIGHTPOSITION);
 80007c8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0x228>)
 80007ce:	f000 f882 	bl	80008d6 <_ZN5Servo10TurnShaftsEm>
				break;
 80007d2:	e000      	b.n	80007d6 <main+0x212>
			default:
				break;
 80007d4:	bf00      	nop
		bluetoothData = hc05.GetChar();
 80007d6:	e78d      	b.n	80006f4 <main+0x130>
 80007d8:	40023800 	.word	0x40023800
 80007dc:	08001ea8 	.word	0x08001ea8
 80007e0:	08001eb0 	.word	0x08001eb0
 80007e4:	20000078 	.word	0x20000078
 80007e8:	40000800 	.word	0x40000800
 80007ec:	2000002c 	.word	0x2000002c
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	40011000 	.word	0x40011000
 80007f8:	2000007c 	.word	0x2000007c
 80007fc:	20000028 	.word	0x20000028

08000800 <SysTick_Handler>:
		}
	}
}

extern "C" void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000804:	f000 f92a 	bl	8000a5c <HAL_IncTick>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN5ServoC1EP11pinStruct_tP11TIM_TypeDefhh>:
 *      Author: barbog
 */

#include "servo.h"

Servo::Servo(pinStruct_t* servoPin,TIM_TypeDef* TIMx, uint8_t gpioAFSelTIMx, uint8_t pwmChannel)
 800080c:	b580      	push	{r7, lr}
 800080e:	b090      	sub	sp, #64	; 0x40
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	70fb      	strb	r3, [r7, #3]
{
	pwmCh = pwmChannel;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	// GPIO configuration
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = servoPin->selectedPin;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	889b      	ldrh	r3, [r3, #4]
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = gpioAFSelTIMx;
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(servoPin->port, &GPIO_InitStruct);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f9fb 	bl	8000c50 <HAL_GPIO_Init>

    // TIM4 configuration
    TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]
    htim.Instance = TIMx;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
    htim.Init.Prescaler = 10 - 1;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2209      	movs	r2, #9
 8000878:	605a      	str	r2, [r3, #4]
    htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    htim.Init.Period = 32000 - 1;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000886:	60da      	str	r2, [r3, #12]
    htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
    htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	619a      	str	r2, [r3, #24]
    HAL_TIM_PWM_Init(&htim);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fba2 	bl	8000fe0 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	613b      	str	r3, [r7, #16]
    sConfigOC.Pulse = SERVO_MIDPOSITION;
 80008a0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80008a4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
    HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, pwmChannel);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80008b4:	f107 0110 	add.w	r1, r7, #16
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fcb3 	bl	8001224 <HAL_TIM_PWM_ConfigChannel>

    // Start PWM signal
    HAL_TIM_PWM_Start(&htim, pwmChannel);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fbe4 	bl	8001094 <HAL_TIM_PWM_Start>
}
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4618      	mov	r0, r3
 80008d0:	3740      	adds	r7, #64	; 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN5Servo10TurnShaftsEm>:

void Servo::TurnShafts(uint32_t position)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, position);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <_ZN5Servo10TurnShaftsEm+0x1e>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f2:	e017      	b.n	8000924 <_ZN5Servo10TurnShaftsEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, position);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d104      	bne.n	8000908 <_ZN5Servo10TurnShaftsEm+0x32>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000906:	e00d      	b.n	8000924 <_ZN5Servo10TurnShaftsEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, position);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800090e:	2b08      	cmp	r3, #8
 8000910:	d104      	bne.n	800091c <_ZN5Servo10TurnShaftsEm+0x46>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800091a:	e003      	b.n	8000924 <_ZN5Servo10TurnShaftsEm+0x4e>
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, position);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f001 fa61 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fe1d 	bl	80005c4 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08001ed0 	.word	0x08001ed0
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	200000c8 	.word	0x200000c8

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f909 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f000 f810 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f000 f806 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f90b 	bl	8000c36 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f8e1 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000c4 	.word	0x200000c4

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff47 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5c 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	e165      	b.n	8000f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f040 8154 	bne.w	8000f32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d130      	bne.n	8000d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	f003 0201 	and.w	r2, r3, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d017      	beq.n	8000d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d123      	bne.n	8000d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	69b9      	ldr	r1, [r7, #24]
 8000d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0203 	and.w	r2, r3, #3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80ae 	beq.w	8000f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <HAL_GPIO_Init+0x300>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a5c      	ldr	r2, [pc, #368]	; (8000f50 <HAL_GPIO_Init+0x300>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <HAL_GPIO_Init+0x300>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df2:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <HAL_GPIO_Init+0x304>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <HAL_GPIO_Init+0x308>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d025      	beq.n	8000e6a <HAL_GPIO_Init+0x21a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x30c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01f      	beq.n	8000e66 <HAL_GPIO_Init+0x216>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x310>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x212>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x314>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x20e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4b      	ldr	r2, [pc, #300]	; (8000f68 <HAL_GPIO_Init+0x318>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x20a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4a      	ldr	r2, [pc, #296]	; (8000f6c <HAL_GPIO_Init+0x31c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x206>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_GPIO_Init+0x320>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x202>
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e00c      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e00a      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e56:	2305      	movs	r3, #5
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x21c>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x304>)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f ae96 	bls.w	8000c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40021400 	.word	0x40021400
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000000 	.word	0x20000000

08000f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f94:	f7ff fff0 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	0a9b      	lsrs	r3, r3, #10
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fa6:	5ccb      	ldrb	r3, [r1, r3]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	08001eb8 	.word	0x08001eb8

08000fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fbc:	f7ff ffdc 	bl	8000f78 <HAL_RCC_GetHCLKFreq>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0b5b      	lsrs	r3, r3, #13
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4903      	ldr	r1, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	08001eb8 	.word	0x08001eb8

08000fe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e041      	b.n	8001076 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f839 	bl	800107e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3304      	adds	r3, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f000 f9c2 	bl	80013a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_TIM_PWM_Start+0x24>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	e022      	b.n	80010fe <HAL_TIM_PWM_Start+0x6a>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d109      	bne.n	80010d2 <HAL_TIM_PWM_Start+0x3e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	e015      	b.n	80010fe <HAL_TIM_PWM_Start+0x6a>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d109      	bne.n	80010ec <HAL_TIM_PWM_Start+0x58>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e008      	b.n	80010fe <HAL_TIM_PWM_Start+0x6a>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07c      	b.n	8001200 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <HAL_TIM_PWM_Start+0x82>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001114:	e013      	b.n	800113e <HAL_TIM_PWM_Start+0xaa>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d104      	bne.n	8001126 <HAL_TIM_PWM_Start+0x92>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001124:	e00b      	b.n	800113e <HAL_TIM_PWM_Start+0xaa>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b08      	cmp	r3, #8
 800112a:	d104      	bne.n	8001136 <HAL_TIM_PWM_Start+0xa2>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001134:	e003      	b.n	800113e <HAL_TIM_PWM_Start+0xaa>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2202      	movs	r2, #2
 800113a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fb7e 	bl	8001848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_TIM_PWM_Start+0x174>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d004      	beq.n	8001160 <HAL_TIM_PWM_Start+0xcc>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a2c      	ldr	r2, [pc, #176]	; (800120c <HAL_TIM_PWM_Start+0x178>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_TIM_PWM_Start+0xd0>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_TIM_PWM_Start+0xd2>
 8001164:	2300      	movs	r3, #0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_TIM_PWM_Start+0x174>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d022      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d01d      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_TIM_PWM_Start+0x17c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d018      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_TIM_PWM_Start+0x180>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_TIM_PWM_Start+0x184>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00e      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_TIM_PWM_Start+0x178>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d009      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_TIM_PWM_Start+0x188>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d004      	beq.n	80011ca <HAL_TIM_PWM_Start+0x136>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a16      	ldr	r2, [pc, #88]	; (8001220 <HAL_TIM_PWM_Start+0x18c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d111      	bne.n	80011ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d010      	beq.n	80011fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011ec:	e007      	b.n	80011fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0201 	orr.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010000 	.word	0x40010000
 800120c:	40010400 	.word	0x40010400
 8001210:	40000400 	.word	0x40000400
 8001214:	40000800 	.word	0x40000800
 8001218:	40000c00 	.word	0x40000c00
 800121c:	40014000 	.word	0x40014000
 8001220:	40001800 	.word	0x40001800

08001224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e0ae      	b.n	80013a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	f200 809f 	bhi.w	8001390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	0800128d 	.word	0x0800128d
 800125c:	08001391 	.word	0x08001391
 8001260:	08001391 	.word	0x08001391
 8001264:	08001391 	.word	0x08001391
 8001268:	080012cd 	.word	0x080012cd
 800126c:	08001391 	.word	0x08001391
 8001270:	08001391 	.word	0x08001391
 8001274:	08001391 	.word	0x08001391
 8001278:	0800130f 	.word	0x0800130f
 800127c:	08001391 	.word	0x08001391
 8001280:	08001391 	.word	0x08001391
 8001284:	08001391 	.word	0x08001391
 8001288:	0800134f 	.word	0x0800134f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f928 	bl	80014e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0208 	orr.w	r2, r2, #8
 80012a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0204 	bic.w	r2, r2, #4
 80012b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6999      	ldr	r1, [r3, #24]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	619a      	str	r2, [r3, #24]
      break;
 80012ca:	e064      	b.n	8001396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f978 	bl	80015c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6999      	ldr	r1, [r3, #24]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	021a      	lsls	r2, r3, #8
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	619a      	str	r2, [r3, #24]
      break;
 800130c:	e043      	b.n	8001396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f9cd 	bl	80016b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69da      	ldr	r2, [r3, #28]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0208 	orr.w	r2, r2, #8
 8001328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69d9      	ldr	r1, [r3, #28]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	61da      	str	r2, [r3, #28]
      break;
 800134c:	e023      	b.n	8001396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa21 	bl	800179c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69d9      	ldr	r1, [r3, #28]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	021a      	lsls	r2, r3, #8
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	61da      	str	r2, [r3, #28]
      break;
 800138e:	e002      	b.n	8001396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	75fb      	strb	r3, [r7, #23]
      break;
 8001394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800139e:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a40      	ldr	r2, [pc, #256]	; (80014bc <TIM_Base_SetConfig+0x114>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <TIM_Base_SetConfig+0x40>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c6:	d00f      	beq.n	80013e8 <TIM_Base_SetConfig+0x40>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <TIM_Base_SetConfig+0x118>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00b      	beq.n	80013e8 <TIM_Base_SetConfig+0x40>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <TIM_Base_SetConfig+0x11c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <TIM_Base_SetConfig+0x40>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <TIM_Base_SetConfig+0x120>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d003      	beq.n	80013e8 <TIM_Base_SetConfig+0x40>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3a      	ldr	r2, [pc, #232]	; (80014cc <TIM_Base_SetConfig+0x124>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d108      	bne.n	80013fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <TIM_Base_SetConfig+0x114>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d02b      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d027      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <TIM_Base_SetConfig+0x118>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d023      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <TIM_Base_SetConfig+0x11c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <TIM_Base_SetConfig+0x120>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01b      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <TIM_Base_SetConfig+0x124>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d017      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <TIM_Base_SetConfig+0x128>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <TIM_Base_SetConfig+0x12c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00f      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <TIM_Base_SetConfig+0x130>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00b      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a25      	ldr	r2, [pc, #148]	; (80014dc <TIM_Base_SetConfig+0x134>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <TIM_Base_SetConfig+0x138>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d003      	beq.n	800145a <TIM_Base_SetConfig+0xb2>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <TIM_Base_SetConfig+0x13c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d108      	bne.n	800146c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <TIM_Base_SetConfig+0x114>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d003      	beq.n	80014a0 <TIM_Base_SetConfig+0xf8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <TIM_Base_SetConfig+0x124>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	615a      	str	r2, [r3, #20]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40000400 	.word	0x40000400
 80014c4:	40000800 	.word	0x40000800
 80014c8:	40000c00 	.word	0x40000c00
 80014cc:	40010400 	.word	0x40010400
 80014d0:	40014000 	.word	0x40014000
 80014d4:	40014400 	.word	0x40014400
 80014d8:	40014800 	.word	0x40014800
 80014dc:	40001800 	.word	0x40001800
 80014e0:	40001c00 	.word	0x40001c00
 80014e4:	40002000 	.word	0x40002000

080014e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	f023 0201 	bic.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f023 0302 	bic.w	r3, r3, #2
 8001530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <TIM_OC1_SetConfig+0xd8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d003      	beq.n	800154c <TIM_OC1_SetConfig+0x64>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <TIM_OC1_SetConfig+0xdc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d10c      	bne.n	8001566 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f023 0308 	bic.w	r3, r3, #8
 8001552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4313      	orrs	r3, r2
 800155c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <TIM_OC1_SetConfig+0xd8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <TIM_OC1_SetConfig+0x8e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <TIM_OC1_SetConfig+0xdc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d111      	bne.n	800159a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800157c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	621a      	str	r2, [r3, #32]
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40010400 	.word	0x40010400

080015c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	f023 0210 	bic.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f023 0320 	bic.w	r3, r3, #32
 8001612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <TIM_OC2_SetConfig+0xe4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d003      	beq.n	8001630 <TIM_OC2_SetConfig+0x68>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <TIM_OC2_SetConfig+0xe8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10d      	bne.n	800164c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <TIM_OC2_SetConfig+0xe4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d003      	beq.n	800165c <TIM_OC2_SetConfig+0x94>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <TIM_OC2_SetConfig+0xe8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d113      	bne.n	8001684 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800166a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	621a      	str	r2, [r3, #32]
}
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40010400 	.word	0x40010400

080016b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <TIM_OC3_SetConfig+0xe0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d003      	beq.n	800171a <TIM_OC3_SetConfig+0x66>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a20      	ldr	r2, [pc, #128]	; (8001798 <TIM_OC3_SetConfig+0xe4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10d      	bne.n	8001736 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <TIM_OC3_SetConfig+0xe0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d003      	beq.n	8001746 <TIM_OC3_SetConfig+0x92>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <TIM_OC3_SetConfig+0xe4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d113      	bne.n	800176e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800174c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	621a      	str	r2, [r3, #32]
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40010000 	.word	0x40010000
 8001798:	40010400 	.word	0x40010400

0800179c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	031b      	lsls	r3, r3, #12
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <TIM_OC4_SetConfig+0xa4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d003      	beq.n	8001804 <TIM_OC4_SetConfig+0x68>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <TIM_OC4_SetConfig+0xa8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d109      	bne.n	8001818 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800180a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	621a      	str	r2, [r3, #32]
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40010000 	.word	0x40010000
 8001844:	40010400 	.word	0x40010400

08001848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	2201      	movs	r2, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	431a      	orrs	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	621a      	str	r2, [r3, #32]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e03f      	b.n	8001924 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f837 	bl	800192c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2224      	movs	r2, #36	; 0x24
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f832 	bl	8001940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800190a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0c0      	sub	sp, #256	; 0x100
 8001946:	af00      	add	r7, sp, #0
 8001948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800194c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	ea40 0301 	orr.w	r3, r0, r1
 8001968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800196a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	431a      	orrs	r2, r3
 8001978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	431a      	orrs	r2, r3
 8001980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800198c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001998:	f021 010c 	bic.w	r1, r1, #12
 800199c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019a6:	430b      	orrs	r3, r1
 80019a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80019b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ba:	6999      	ldr	r1, [r3, #24]
 80019bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	ea40 0301 	orr.w	r3, r0, r1
 80019c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <UART_SetConfig+0x2cc>)
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d005      	beq.n	80019e0 <UART_SetConfig+0xa0>
 80019d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b8d      	ldr	r3, [pc, #564]	; (8001c10 <UART_SetConfig+0x2d0>)
 80019dc:	429a      	cmp	r2, r3
 80019de:	d104      	bne.n	80019ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80019e0:	f7ff faea 	bl	8000fb8 <HAL_RCC_GetPCLK2Freq>
 80019e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80019e8:	e003      	b.n	80019f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80019ea:	f7ff fad1 	bl	8000f90 <HAL_RCC_GetPCLK1Freq>
 80019ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019fc:	f040 810c 	bne.w	8001c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a04:	2200      	movs	r2, #0
 8001a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001a12:	4622      	mov	r2, r4
 8001a14:	462b      	mov	r3, r5
 8001a16:	1891      	adds	r1, r2, r2
 8001a18:	65b9      	str	r1, [r7, #88]	; 0x58
 8001a1a:	415b      	adcs	r3, r3
 8001a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a22:	4621      	mov	r1, r4
 8001a24:	eb12 0801 	adds.w	r8, r2, r1
 8001a28:	4629      	mov	r1, r5
 8001a2a:	eb43 0901 	adc.w	r9, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a42:	4690      	mov	r8, r2
 8001a44:	4699      	mov	r9, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb18 0303 	adds.w	r3, r8, r3
 8001a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001a50:	462b      	mov	r3, r5
 8001a52:	eb49 0303 	adc.w	r3, r9, r3
 8001a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001a66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001a6e:	460b      	mov	r3, r1
 8001a70:	18db      	adds	r3, r3, r3
 8001a72:	653b      	str	r3, [r7, #80]	; 0x50
 8001a74:	4613      	mov	r3, r2
 8001a76:	eb42 0303 	adc.w	r3, r2, r3
 8001a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001a84:	f7fe fbbe 	bl	8000204 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <UART_SetConfig+0x2d4>)
 8001a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	011c      	lsls	r4, r3, #4
 8001a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	464b      	mov	r3, r9
 8001aac:	1891      	adds	r1, r2, r2
 8001aae:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ab0:	415b      	adcs	r3, r3
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ab8:	4641      	mov	r1, r8
 8001aba:	eb12 0a01 	adds.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ad8:	4692      	mov	sl, r2
 8001ada:	469b      	mov	fp, r3
 8001adc:	4643      	mov	r3, r8
 8001ade:	eb1a 0303 	adds.w	r3, sl, r3
 8001ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8001aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001afc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001b04:	460b      	mov	r3, r1
 8001b06:	18db      	adds	r3, r3, r3
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	eb42 0303 	adc.w	r3, r2, r3
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
 8001b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001b1a:	f7fe fb73 	bl	8000204 <__aeabi_uldivmod>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <UART_SetConfig+0x2d4>)
 8001b26:	fba3 2301 	umull	r2, r3, r3, r1
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2264      	movs	r2, #100	; 0x64
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	1acb      	subs	r3, r1, r3
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <UART_SetConfig+0x2d4>)
 8001b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b48:	441c      	add	r4, r3
 8001b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	1891      	adds	r1, r2, r2
 8001b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b64:	415b      	adcs	r3, r3
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	1851      	adds	r1, r2, r1
 8001b70:	6339      	str	r1, [r7, #48]	; 0x30
 8001b72:	4649      	mov	r1, r9
 8001b74:	414b      	adcs	r3, r1
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001b84:	4659      	mov	r1, fp
 8001b86:	00cb      	lsls	r3, r1, #3
 8001b88:	4651      	mov	r1, sl
 8001b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b8e:	4651      	mov	r1, sl
 8001b90:	00ca      	lsls	r2, r1, #3
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	4642      	mov	r2, r8
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	eb42 0303 	adc.w	r3, r2, r3
 8001ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	18db      	adds	r3, r3, r3
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	eb42 0303 	adc.w	r3, r2, r3
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001bd6:	f7fe fb15 	bl	8000204 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <UART_SetConfig+0x2d4>)
 8001be0:	fba3 1302 	umull	r1, r3, r3, r2
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	2164      	movs	r1, #100	; 0x64
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	3332      	adds	r3, #50	; 0x32
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <UART_SetConfig+0x2d4>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4422      	add	r2, r4
 8001c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001c08:	e105      	b.n	8001e16 <UART_SetConfig+0x4d6>
 8001c0a:	bf00      	nop
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	1891      	adds	r1, r2, r2
 8001c30:	6239      	str	r1, [r7, #32]
 8001c32:	415b      	adcs	r3, r3
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3a:	4641      	mov	r1, r8
 8001c3c:	1854      	adds	r4, r2, r1
 8001c3e:	4649      	mov	r1, r9
 8001c40:	eb43 0501 	adc.w	r5, r3, r1
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	00eb      	lsls	r3, r5, #3
 8001c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c52:	00e2      	lsls	r2, r4, #3
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	4643      	mov	r3, r8
 8001c5a:	18e3      	adds	r3, r4, r3
 8001c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c60:	464b      	mov	r3, r9
 8001c62:	eb45 0303 	adc.w	r3, r5, r3
 8001c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c86:	4629      	mov	r1, r5
 8001c88:	008b      	lsls	r3, r1, #2
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c90:	4621      	mov	r1, r4
 8001c92:	008a      	lsls	r2, r1, #2
 8001c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001c98:	f7fe fab4 	bl	8000204 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <UART_SetConfig+0x4e4>)
 8001ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	011c      	lsls	r4, r3, #4
 8001caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	1891      	adds	r1, r2, r2
 8001cc2:	61b9      	str	r1, [r7, #24]
 8001cc4:	415b      	adcs	r3, r3
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ccc:	4641      	mov	r1, r8
 8001cce:	1851      	adds	r1, r2, r1
 8001cd0:	6139      	str	r1, [r7, #16]
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	414b      	adcs	r3, r1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	00cb      	lsls	r3, r1, #3
 8001ce8:	4651      	mov	r1, sl
 8001cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cee:	4651      	mov	r1, sl
 8001cf0:	00ca      	lsls	r2, r1, #3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4642      	mov	r2, r8
 8001cfa:	189b      	adds	r3, r3, r2
 8001cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d00:	464b      	mov	r3, r9
 8001d02:	460a      	mov	r2, r1
 8001d04:	eb42 0303 	adc.w	r3, r2, r3
 8001d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001d24:	4649      	mov	r1, r9
 8001d26:	008b      	lsls	r3, r1, #2
 8001d28:	4641      	mov	r1, r8
 8001d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2e:	4641      	mov	r1, r8
 8001d30:	008a      	lsls	r2, r1, #2
 8001d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d36:	f7fe fa65 	bl	8000204 <__aeabi_uldivmod>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <UART_SetConfig+0x4e4>)
 8001d40:	fba3 1302 	umull	r1, r3, r3, r2
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	2164      	movs	r1, #100	; 0x64
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	3332      	adds	r3, #50	; 0x32
 8001d52:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <UART_SetConfig+0x4e4>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	441c      	add	r4, r3
 8001d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d64:	2200      	movs	r2, #0
 8001d66:	673b      	str	r3, [r7, #112]	; 0x70
 8001d68:	677a      	str	r2, [r7, #116]	; 0x74
 8001d6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001d6e:	4642      	mov	r2, r8
 8001d70:	464b      	mov	r3, r9
 8001d72:	1891      	adds	r1, r2, r2
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	415b      	adcs	r3, r3
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7e:	4641      	mov	r1, r8
 8001d80:	1851      	adds	r1, r2, r1
 8001d82:	6039      	str	r1, [r7, #0]
 8001d84:	4649      	mov	r1, r9
 8001d86:	414b      	adcs	r3, r1
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001d96:	4659      	mov	r1, fp
 8001d98:	00cb      	lsls	r3, r1, #3
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001da0:	4651      	mov	r1, sl
 8001da2:	00ca      	lsls	r2, r1, #3
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	4642      	mov	r2, r8
 8001dac:	189b      	adds	r3, r3, r2
 8001dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8001db0:	464b      	mov	r3, r9
 8001db2:	460a      	mov	r2, r1
 8001db4:	eb42 0303 	adc.w	r3, r2, r3
 8001db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc4:	667a      	str	r2, [r7, #100]	; 0x64
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	008b      	lsls	r3, r1, #2
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ddc:	4641      	mov	r1, r8
 8001dde:	008a      	lsls	r2, r1, #2
 8001de0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001de4:	f7fe fa0e 	bl	8000204 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <UART_SetConfig+0x4e4>)
 8001dee:	fba3 1302 	umull	r1, r3, r3, r2
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2164      	movs	r1, #100	; 0x64
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	3332      	adds	r3, #50	; 0x32
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <UART_SetConfig+0x4e4>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4422      	add	r2, r4
 8001e14:	609a      	str	r2, [r3, #8]
}
 8001e16:	bf00      	nop
 8001e18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e22:	bf00      	nop
 8001e24:	51eb851f 	.word	0x51eb851f

08001e28 <__cxa_guard_acquire>:
 8001e28:	6803      	ldr	r3, [r0, #0]
 8001e2a:	07db      	lsls	r3, r3, #31
 8001e2c:	d406      	bmi.n	8001e3c <__cxa_guard_acquire+0x14>
 8001e2e:	7843      	ldrb	r3, [r0, #1]
 8001e30:	b103      	cbz	r3, 8001e34 <__cxa_guard_acquire+0xc>
 8001e32:	deff      	udf	#255	; 0xff
 8001e34:	2301      	movs	r3, #1
 8001e36:	7043      	strb	r3, [r0, #1]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4770      	bx	lr
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4770      	bx	lr

08001e40 <__cxa_guard_release>:
 8001e40:	2301      	movs	r3, #1
 8001e42:	6003      	str	r3, [r0, #0]
 8001e44:	4770      	bx	lr
	...

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4d0d      	ldr	r5, [pc, #52]	; (8001e80 <__libc_init_array+0x38>)
 8001e4c:	4c0d      	ldr	r4, [pc, #52]	; (8001e84 <__libc_init_array+0x3c>)
 8001e4e:	1b64      	subs	r4, r4, r5
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2600      	movs	r6, #0
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	4d0b      	ldr	r5, [pc, #44]	; (8001e88 <__libc_init_array+0x40>)
 8001e5a:	4c0c      	ldr	r4, [pc, #48]	; (8001e8c <__libc_init_array+0x44>)
 8001e5c:	f000 f818 	bl	8001e90 <_init>
 8001e60:	1b64      	subs	r4, r4, r5
 8001e62:	10a4      	asrs	r4, r4, #2
 8001e64:	2600      	movs	r6, #0
 8001e66:	42a6      	cmp	r6, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e70:	4798      	blx	r3
 8001e72:	3601      	adds	r6, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7a:	4798      	blx	r3
 8001e7c:	3601      	adds	r6, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08001ec8 	.word	0x08001ec8
 8001e84:	08001ec8 	.word	0x08001ec8
 8001e88:	08001ec8 	.word	0x08001ec8
 8001e8c:	08001ecc 	.word	0x08001ecc

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
