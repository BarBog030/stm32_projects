
Self_driving_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002358  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002588  08002588  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002588  08002588  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  0800259c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800259c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000844c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149b  00000000  00000000  00028488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  0002a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022353  00000000  00000000  0002a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d93  00000000  00000000  0004ca63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca277  00000000  00000000  000547f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ea6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd4  00000000  00000000  0011eac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002504 	.word	0x08002504

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002504 	.word	0x08002504

08000204 <_Z21HCSR04_TrigPinPWMInitP11pinStruct_tP11TIM_TypeDefhh>:

void HCSR04_TrigPinPWMInit(pinStruct_t* trigPin,
		  	  	  	  	   TIM_TypeDef* TIMx,
						   uint8_t gpioAFSelTIMx,
						   uint8_t pwmChannel)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0a2      	sub	sp, #136	; 0x88
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	460b      	mov	r3, r1
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4613      	mov	r3, r2
 8000218:	71bb      	strb	r3, [r7, #6]
	// GPIO configuration
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = trigPin->selectedPin;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	889b      	ldrh	r3, [r3, #4]
 800022e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000230:	2302      	movs	r3, #2
 8000232:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = gpioAFSelTIMx;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(trigPin->port, &GPIO_InitStruct);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800024c:	4611      	mov	r1, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fed0 	bl	8000ff4 <HAL_GPIO_Init>

    // TIM1 configuration
    TIM_HandleTypeDef htim;
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
 8000264:	615a      	str	r2, [r3, #20]
 8000266:	619a      	str	r2, [r3, #24]
    htim.Instance = TIMx;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
    htim.Init.Prescaler = 10 - 1;
 800026c:	2309      	movs	r3, #9
 800026e:	633b      	str	r3, [r7, #48]	; 0x30
    htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000270:	2300      	movs	r3, #0
 8000272:	637b      	str	r3, [r7, #52]	; 0x34
    htim.Init.Period = 32000 - 1; // 20ms timer period
 8000274:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
    htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
    htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_TIM_PWM_Init(&htim);
 8000282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f861 	bl	800134e <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800028c:	2360      	movs	r3, #96	; 0x60
 800028e:	613b      	str	r3, [r7, #16]
    sConfigOC.Pulse = 24; // 15us trigger pulse
 8000290:	2318      	movs	r3, #24
 8000292:	617b      	str	r3, [r7, #20]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000294:	2300      	movs	r3, #0
 8000296:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
    HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, pwmChannel);
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	f107 0110 	add.w	r1, r7, #16
 80002a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fb44 	bl	8001934 <HAL_TIM_PWM_ConfigChannel>

    // Start PWM signal
    HAL_TIM_PWM_Start(&htim, pwmChannel);
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f8a3 	bl	8001400 <HAL_TIM_PWM_Start>
}
 80002ba:	bf00      	nop
 80002bc:	3788      	adds	r7, #136	; 0x88
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_ZN6HCSR04C1EP11pinStruct_tP11TIM_TypeDefh>:

HCSR04::HCSR04(pinStruct_t* echoPin,
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b092      	sub	sp, #72	; 0x48
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
 80002ce:	70fb      	strb	r3, [r7, #3]
			   TIM_TypeDef* TIMx,
			   uint8_t gpioAFSelTIMx)
{
	pulseWidth = 0;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2200      	movs	r2, #0
 80002d4:	649a      	str	r2, [r3, #72]	; 0x48
	distanceCM = 0;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2200      	movs	r2, #0
 80002da:	64da      	str	r2, [r3, #76]	; 0x4c

	//GPIO config
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = echoPin->selectedPin;
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	889b      	ldrh	r3, [r3, #4]
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fa:	2300      	movs	r3, #0
 80002fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = gpioAFSelTIMx;
 80002fe:	78fb      	ldrb	r3, [r7, #3]
 8000300:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(echoPin->port, &GPIO_InitStruct);
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fe71 	bl	8000ff4 <HAL_GPIO_Init>

	//PWM input mode config
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000312:	f107 0320 	add.w	r3, r7, #32
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]

    htim.Instance = TIMx;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]
    htim.Init.Prescaler = 200 - 1;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	22c7      	movs	r2, #199	; 0xc7
 800033a:	605a      	str	r2, [r3, #4]
    htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
    htim.Init.Period = 16000 - 1;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000348:	60da      	str	r2, [r3, #12]
    htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
    htim.Init.RepetitionCounter = 0;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2200      	movs	r2, #0
 8000354:	615a      	str	r2, [r3, #20]
    htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	619a      	str	r2, [r3, #24]
    HAL_TIM_IC_Init(&htim);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4618      	mov	r0, r3
 8000360:	f001 f916 	bl	8001590 <HAL_TIM_IC_Init>

    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000364:	2304      	movs	r3, #4
 8000366:	623b      	str	r3, [r7, #32]
    sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000368:	2350      	movs	r3, #80	; 0x50
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800036c:	2300      	movs	r3, #0
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
    sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	62fb      	str	r3, [r7, #44]	; 0x2c
    sSlaveConfig.TriggerFilter = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_TIM_SlaveConfigSynchro(&htim, &sSlaveConfig);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f107 0220 	add.w	r2, r7, #32
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fb99 	bl	8001ab8 <HAL_TIM_SlaveConfigSynchro>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
    sConfigIC.ICFilter = 0x0F;
 8000392:	230f      	movs	r3, #15
 8000394:	61fb      	str	r3, [r7, #28]
    HAL_TIM_IC_ConfigChannel(&htim, &sConfigIC, TIM_CHANNEL_1);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f107 0110 	add.w	r1, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fa2c 	bl	80017fc <HAL_TIM_IC_ConfigChannel>

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80003a4:	2302      	movs	r3, #2
 80003a6:	613b      	str	r3, [r7, #16]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	617b      	str	r3, [r7, #20]
    HAL_TIM_IC_ConfigChannel(&htim, &sConfigIC, TIM_CHANNEL_2);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f107 0110 	add.w	r1, r7, #16
 80003b2:	2204      	movs	r2, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fa21 	bl	80017fc <HAL_TIM_IC_ConfigChannel>

    HAL_TIM_IC_Start(&htim, TIM_CHANNEL_1);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f940 	bl	8001644 <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim, TIM_CHANNEL_2);
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2104      	movs	r1, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 f93b 	bl	8001644 <HAL_TIM_IC_Start>
}
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4618      	mov	r0, r3
 80003d2:	3748      	adds	r7, #72	; 0x48
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <_ZN6HCSR0411GetDistanceEv>:

uint32_t HCSR04::GetDistance(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	const uint32_t sysClockFreq = 16000000;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <_ZN6HCSR0411GetDistanceEv+0x78>)
 80003e2:	60fb      	str	r3, [r7, #12]
	if((htim.Instance->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	f003 0304 	and.w	r3, r3, #4
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	bf0c      	ite	eq
 80003f2:	2301      	moveq	r3, #1
 80003f4:	2300      	movne	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d020      	beq.n	800043e <_ZN6HCSR0411GetDistanceEv+0x66>
	{
		pulseWidth = htim.Instance->CCR2;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	649a      	str	r2, [r3, #72]	; 0x48
		distanceCM = (float)pulseWidth * htim.Init.Prescaler * 1000000 / (58 * sysClockFreq);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040a:	ee07 3a90 	vmov	s15, r3
 800040e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	ee07 3a90 	vmov	s15, r3
 800041a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800041e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000422:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000454 <_ZN6HCSR0411GetDistanceEv+0x7c>
 8000426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800042a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000458 <_ZN6HCSR0411GetDistanceEv+0x80>
 800042e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000436:	ee17 2a90 	vmov	r2, s15
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	return distanceCM;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	00f42400 	.word	0x00f42400
 8000454:	49742400 	.word	0x49742400
 8000458:	4e5d40a0 	.word	0x4e5d40a0

0800045c <main>:
#include "motion_control.h"

int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b0a0      	sub	sp, #128	; 0x80
 8000460:	af04      	add	r7, sp, #16
	HAL_Init();
 8000462:	f000 fc43 	bl	8000cec <HAL_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	4bad      	ldr	r3, [pc, #692]	; (8000720 <main+0x2c4>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4aac      	ldr	r2, [pc, #688]	; (8000720 <main+0x2c4>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
 8000476:	4baa      	ldr	r3, [pc, #680]	; (8000720 <main+0x2c4>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
 8000480:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	4ba6      	ldr	r3, [pc, #664]	; (8000720 <main+0x2c4>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4aa5      	ldr	r2, [pc, #660]	; (8000720 <main+0x2c4>)
 800048c:	f043 0302 	orr.w	r3, r3, #2
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
 8000492:	4ba3      	ldr	r3, [pc, #652]	; (8000720 <main+0x2c4>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
 80004a2:	4b9f      	ldr	r3, [pc, #636]	; (8000720 <main+0x2c4>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a9e      	ldr	r2, [pc, #632]	; (8000720 <main+0x2c4>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
 80004ae:	4b9c      	ldr	r3, [pc, #624]	; (8000720 <main+0x2c4>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM1_CLK_ENABLE();
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	4b98      	ldr	r3, [pc, #608]	; (8000720 <main+0x2c4>)
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	4a97      	ldr	r2, [pc, #604]	; (8000720 <main+0x2c4>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6453      	str	r3, [r2, #68]	; 0x44
 80004ca:	4b95      	ldr	r3, [pc, #596]	; (8000720 <main+0x2c4>)
 80004cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	4b91      	ldr	r3, [pc, #580]	; (8000720 <main+0x2c4>)
 80004dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004de:	4a90      	ldr	r2, [pc, #576]	; (8000720 <main+0x2c4>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6413      	str	r3, [r2, #64]	; 0x40
 80004e6:	4b8e      	ldr	r3, [pc, #568]	; (8000720 <main+0x2c4>)
 80004e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b8a      	ldr	r3, [pc, #552]	; (8000720 <main+0x2c4>)
 80004f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fa:	4a89      	ldr	r2, [pc, #548]	; (8000720 <main+0x2c4>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	6413      	str	r3, [r2, #64]	; 0x40
 8000502:	4b87      	ldr	r3, [pc, #540]	; (8000720 <main+0x2c4>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM4_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b83      	ldr	r3, [pc, #524]	; (8000720 <main+0x2c4>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000516:	4a82      	ldr	r2, [pc, #520]	; (8000720 <main+0x2c4>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6413      	str	r3, [r2, #64]	; 0x40
 800051e:	4b80      	ldr	r3, [pc, #512]	; (8000720 <main+0x2c4>)
 8000520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

	//Trigger pin initialization for HCSR04 sensors
	pinStruct_t trigPin = {GPIOA, GPIO_PIN_10};
 800052a:	4a7e      	ldr	r2, [pc, #504]	; (8000724 <main+0x2c8>)
 800052c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000534:	e883 0003 	stmia.w	r3, {r0, r1}
	HCSR04_TrigPinPWMInit(&trigPin, TIM1, GPIO_AF1_TIM1, TIM_CHANNEL_3);
 8000538:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800053c:	2308      	movs	r3, #8
 800053e:	2201      	movs	r2, #1
 8000540:	4979      	ldr	r1, [pc, #484]	; (8000728 <main+0x2cc>)
 8000542:	f7ff fe5f 	bl	8000204 <_Z21HCSR04_TrigPinPWMInitP11pinStruct_tP11TIM_TypeDefhh>

	//Echo pins initialization for HCSR04 sensor
	pinStruct_t echoPin1 = {GPIOA,  GPIO_PIN_8};
 8000546:	4a79      	ldr	r2, [pc, #484]	; (800072c <main+0x2d0>)
 8000548:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800054c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000550:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t echoPin2 = {GPIOA, GPIO_PIN_0};
 8000554:	4a76      	ldr	r2, [pc, #472]	; (8000730 <main+0x2d4>)
 8000556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800055a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055e:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t echoPin3 = {GPIOA, GPIO_PIN_6};
 8000562:	4a74      	ldr	r2, [pc, #464]	; (8000734 <main+0x2d8>)
 8000564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	e883 0003 	stmia.w	r3, {r0, r1}
	static HCSR04 middleSensor(&echoPin1, TIM1, GPIO_AF1_TIM1);
 8000570:	4b71      	ldr	r3, [pc, #452]	; (8000738 <main+0x2dc>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	f3bf 8f5b 	dmb	ish
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf0c      	ite	eq
 8000582:	2301      	moveq	r3, #1
 8000584:	2300      	movne	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d014      	beq.n	80005b6 <main+0x15a>
 800058c:	486a      	ldr	r0, [pc, #424]	; (8000738 <main+0x2dc>)
 800058e:	f001 ff85 	bl	800249c <__cxa_guard_acquire>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d009      	beq.n	80005b6 <main+0x15a>
 80005a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80005a6:	2301      	movs	r3, #1
 80005a8:	4a5f      	ldr	r2, [pc, #380]	; (8000728 <main+0x2cc>)
 80005aa:	4864      	ldr	r0, [pc, #400]	; (800073c <main+0x2e0>)
 80005ac:	f7ff fe89 	bl	80002c2 <_ZN6HCSR04C1EP11pinStruct_tP11TIM_TypeDefh>
 80005b0:	4861      	ldr	r0, [pc, #388]	; (8000738 <main+0x2dc>)
 80005b2:	f001 ff7f 	bl	80024b4 <__cxa_guard_release>
	static HCSR04 leftSensor(&echoPin2, TIM2, GPIO_AF1_TIM2);
 80005b6:	4b62      	ldr	r3, [pc, #392]	; (8000740 <main+0x2e4>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	f3bf 8f5b 	dmb	ish
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d015      	beq.n	80005fe <main+0x1a2>
 80005d2:	485b      	ldr	r0, [pc, #364]	; (8000740 <main+0x2e4>)
 80005d4:	f001 ff62 	bl	800249c <__cxa_guard_acquire>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00a      	beq.n	80005fe <main+0x1a2>
 80005e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80005ec:	2301      	movs	r3, #1
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f2:	4854      	ldr	r0, [pc, #336]	; (8000744 <main+0x2e8>)
 80005f4:	f7ff fe65 	bl	80002c2 <_ZN6HCSR04C1EP11pinStruct_tP11TIM_TypeDefh>
 80005f8:	4851      	ldr	r0, [pc, #324]	; (8000740 <main+0x2e4>)
 80005fa:	f001 ff5b 	bl	80024b4 <__cxa_guard_release>
	static HCSR04 rightSensor(&echoPin3, TIM3, GPIO_AF2_TIM3);
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <main+0x2ec>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f3bf 8f5b 	dmb	ish
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d014      	beq.n	8000644 <main+0x1e8>
 800061a:	484b      	ldr	r0, [pc, #300]	; (8000748 <main+0x2ec>)
 800061c:	f001 ff3e 	bl	800249c <__cxa_guard_acquire>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf14      	ite	ne
 8000626:	2301      	movne	r3, #1
 8000628:	2300      	moveq	r3, #0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <main+0x1e8>
 8000630:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000634:	2302      	movs	r3, #2
 8000636:	4a45      	ldr	r2, [pc, #276]	; (800074c <main+0x2f0>)
 8000638:	4845      	ldr	r0, [pc, #276]	; (8000750 <main+0x2f4>)
 800063a:	f7ff fe42 	bl	80002c2 <_ZN6HCSR04C1EP11pinStruct_tP11TIM_TypeDefh>
 800063e:	4842      	ldr	r0, [pc, #264]	; (8000748 <main+0x2ec>)
 8000640:	f001 ff38 	bl	80024b4 <__cxa_guard_release>

	//Motor pins initialization
	pinStruct_t leftMotorPin1 = {GPIOC, GPIO_PIN_0};
 8000644:	4a43      	ldr	r2, [pc, #268]	; (8000754 <main+0x2f8>)
 8000646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800064a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064e:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t leftMotorPin2 = {GPIOC, GPIO_PIN_1};
 8000652:	4a41      	ldr	r2, [pc, #260]	; (8000758 <main+0x2fc>)
 8000654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t leftMotorPwmPin = {GPIOB, GPIO_PIN_6};
 8000660:	4a3e      	ldr	r2, [pc, #248]	; (800075c <main+0x300>)
 8000662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066a:	e883 0003 	stmia.w	r3, {r0, r1}

	pinStruct_t rightMotorPin1 = {GPIOC, GPIO_PIN_2};
 800066e:	4a3c      	ldr	r2, [pc, #240]	; (8000760 <main+0x304>)
 8000670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000678:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t rightMotorPin2 = {GPIOC, GPIO_PIN_3};
 800067c:	4a39      	ldr	r2, [pc, #228]	; (8000764 <main+0x308>)
 800067e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000686:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t rightMotorPwmPin = {GPIOB, GPIO_PIN_7};
 800068a:	4a37      	ldr	r2, [pc, #220]	; (8000768 <main+0x30c>)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	e883 0003 	stmia.w	r3, {r0, r1}


	static Motor leftMotor(&leftMotorPin1, &leftMotorPin2, &leftMotorPwmPin, TIM4, GPIO_AF2_TIM4, TIM_CHANNEL_1);
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <main+0x310>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f3bf 8f5b 	dmb	ish
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d01c      	beq.n	80006ee <main+0x292>
 80006b4:	482d      	ldr	r0, [pc, #180]	; (800076c <main+0x310>)
 80006b6:	f001 fef1 	bl	800249c <__cxa_guard_acquire>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d011      	beq.n	80006ee <main+0x292>
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80006d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006d6:	2000      	movs	r0, #0
 80006d8:	9002      	str	r0, [sp, #8]
 80006da:	2002      	movs	r0, #2
 80006dc:	9001      	str	r0, [sp, #4]
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <main+0x314>)
 80006e0:	9000      	str	r0, [sp, #0]
 80006e2:	4824      	ldr	r0, [pc, #144]	; (8000774 <main+0x318>)
 80006e4:	f000 f9a8 	bl	8000a38 <_ZN5MotorC1EP11pinStruct_tS1_S1_P11TIM_TypeDefhh>
 80006e8:	4820      	ldr	r0, [pc, #128]	; (800076c <main+0x310>)
 80006ea:	f001 fee3 	bl	80024b4 <__cxa_guard_release>
	static Motor rightMotor(&rightMotorPin1, &rightMotorPin2, &rightMotorPwmPin, TIM4, GPIO_AF2_TIM4, TIM_CHANNEL_2);
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <main+0x31c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f3bf 8f5b 	dmb	ish
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d04b      	beq.n	80007a2 <main+0x346>
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <main+0x31c>)
 800070c:	f001 fec6 	bl	800249c <__cxa_guard_acquire>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	e02d      	b.n	800077c <main+0x320>
 8000720:	40023800 	.word	0x40023800
 8000724:	0800251c 	.word	0x0800251c
 8000728:	40010000 	.word	0x40010000
 800072c:	08002524 	.word	0x08002524
 8000730:	0800252c 	.word	0x0800252c
 8000734:	08002534 	.word	0x08002534
 8000738:	20000078 	.word	0x20000078
 800073c:	20000028 	.word	0x20000028
 8000740:	200000cc 	.word	0x200000cc
 8000744:	2000007c 	.word	0x2000007c
 8000748:	20000120 	.word	0x20000120
 800074c:	40000400 	.word	0x40000400
 8000750:	200000d0 	.word	0x200000d0
 8000754:	0800253c 	.word	0x0800253c
 8000758:	08002544 	.word	0x08002544
 800075c:	0800254c 	.word	0x0800254c
 8000760:	08002554 	.word	0x08002554
 8000764:	0800255c 	.word	0x0800255c
 8000768:	08002564 	.word	0x08002564
 800076c:	20000180 	.word	0x20000180
 8000770:	40000800 	.word	0x40000800
 8000774:	20000124 	.word	0x20000124
 8000778:	200001e0 	.word	0x200001e0
 800077c:	d011      	beq.n	80007a2 <main+0x346>
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000786:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800078a:	2004      	movs	r0, #4
 800078c:	9002      	str	r0, [sp, #8]
 800078e:	2002      	movs	r0, #2
 8000790:	9001      	str	r0, [sp, #4]
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <main+0x364>)
 8000794:	9000      	str	r0, [sp, #0]
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <main+0x368>)
 8000798:	f000 f94e 	bl	8000a38 <_ZN5MotorC1EP11pinStruct_tS1_S1_P11TIM_TypeDefhh>
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <main+0x36c>)
 800079e:	f001 fe89 	bl	80024b4 <__cxa_guard_release>

	const uint32_t minObstacleDistance = 20;
 80007a2:	2314      	movs	r3, #20
 80007a4:	61fb      	str	r3, [r7, #28]

	while(1)
	{
		MoveToFreePath(&leftSensor,
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <main+0x368>)
 80007ac:	9201      	str	r2, [sp, #4]
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <main+0x370>)
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <main+0x374>)
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <main+0x378>)
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <main+0x37c>)
 80007b8:	f000 f8a4 	bl	8000904 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_>
 80007bc:	e7f3      	b.n	80007a6 <main+0x34a>
 80007be:	bf00      	nop
 80007c0:	40000800 	.word	0x40000800
 80007c4:	20000184 	.word	0x20000184
 80007c8:	200001e0 	.word	0x200001e0
 80007cc:	20000124 	.word	0x20000124
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	20000028 	.word	0x20000028
 80007d8:	2000007c 	.word	0x2000007c

080007dc <SysTick_Handler>:

	return 1;
}

extern "C" void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007e0:	f000 fade 	bl	8000da0 <HAL_IncTick>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_Z16ObstacleDetectedP6HCSR04PKm>:
	bool middle;
	bool right;
}path_t;

bool ObstacleDetected(HCSR04* sensor, const uint32_t* minObstacleDistance)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	uint32_t distance;
	distance = sensor->GetDistance();
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fdf0 	bl	80003d8 <_ZN6HCSR0411GetDistanceEv>
 80007f8:	60f8      	str	r0, [r7, #12]
	if(distance <= *minObstacleDistance)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d801      	bhi.n	8000808 <_Z16ObstacleDetectedP6HCSR04PKm+0x20>
	{
		return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <_Z16ObstacleDetectedP6HCSR04PKm+0x22>
	}
	return 0;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <_Z12GetPathIndexP6HCSR04S0_S0_PKm>:

uint8_t GetPathIndex(HCSR04* left, HCSR04* mid, HCSR04* right, const uint32_t* minObstacleDistance)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
	const uint8_t numberOfPaths = 8;
 8000822:	2308      	movs	r3, #8
 8000824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	const path_t pathAddr[numberOfPaths] =
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xe8>)
 800082a:	f107 0414 	add.w	r4, r7, #20
 800082e:	461d      	mov	r5, r3
 8000830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000834:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000838:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		{0,0,0}, {0,0,1}, {0,1,0}, {0,1,1},
		{1,0,0}, {1,0,1}, {1,1,0}, {1,1,1}
	};
	path_t path = {1,1,1};
 800083c:	4a30      	ldr	r2, [pc, #192]	; (8000900 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xec>)
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	4611      	mov	r1, r2
 8000846:	8019      	strh	r1, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	0c12      	lsrs	r2, r2, #16
 800084c:	701a      	strb	r2, [r3, #0]
	uint8_t pathIndex;

	if(ObstacleDetected(left, minObstacleDistance))
 800084e:	6839      	ldr	r1, [r7, #0]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff ffc9 	bl	80007e8 <_Z16ObstacleDetectedP6HCSR04PKm>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0x4c>
	{
		path.left = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	743b      	strb	r3, [r7, #16]
	}
	if(ObstacleDetected(mid, minObstacleDistance))
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	68b8      	ldr	r0, [r7, #8]
 8000864:	f7ff ffc0 	bl	80007e8 <_Z16ObstacleDetectedP6HCSR04PKm>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0x5e>
	{
		path.middle = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	747b      	strb	r3, [r7, #17]
	}
	if(ObstacleDetected(right, minObstacleDistance))
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ffb7 	bl	80007e8 <_Z16ObstacleDetectedP6HCSR04PKm>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0x70>
	{
		path.right = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	74bb      	strb	r3, [r7, #18]
	}

	for(uint8_t i = 0; i < numberOfPaths; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800088a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800088e:	2b07      	cmp	r3, #7
 8000890:	d82e      	bhi.n	80008f0 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xdc>
	{
		if((path.left == pathAddr[i].left) && (path.middle == pathAddr[i].middle) && (path.right == pathAddr[i].right))
 8000892:	7c39      	ldrb	r1, [r7, #16]
 8000894:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	3330      	adds	r3, #48	; 0x30
 80008a0:	443b      	add	r3, r7
 80008a2:	3b1c      	subs	r3, #28
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4299      	cmp	r1, r3
 80008a8:	d11c      	bne.n	80008e4 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xd0>
 80008aa:	7c79      	ldrb	r1, [r7, #17]
 80008ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	3330      	adds	r3, #48	; 0x30
 80008b8:	443b      	add	r3, r7
 80008ba:	3b1b      	subs	r3, #27
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4299      	cmp	r1, r3
 80008c0:	d110      	bne.n	80008e4 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xd0>
 80008c2:	7cb9      	ldrb	r1, [r7, #18]
 80008c4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	443b      	add	r3, r7
 80008d2:	3b1a      	subs	r3, #26
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d104      	bne.n	80008e4 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xd0>
		{
			pathIndex = i;
 80008da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80008e2:	e005      	b.n	80008f0 <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0xdc>
	for(uint8_t i = 0; i < numberOfPaths; i++)
 80008e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80008ee:	e7cc      	b.n	800088a <_Z12GetPathIndexP6HCSR04S0_S0_PKm+0x76>
		}
	}
	return pathIndex;
 80008f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	0800256c 	.word	0x0800256c
 8000900:	08002584 	.word	0x08002584

08000904 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_>:

void MoveToFreePath(HCSR04* left, HCSR04* mid, HCSR04* right, const uint32_t* minObstacleDistance, Motor* leftMotor, Motor* rightMotor)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
	uint8_t pathIndex = GetPathIndex(left, mid, right, minObstacleDistance);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff ff7b 	bl	8000814 <_Z12GetPathIndexP6HCSR04S0_S0_PKm>
 800091e:	4603      	mov	r3, r0
 8000920:	75fb      	strb	r3, [r7, #23]

	switch(pathIndex)
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	2b07      	cmp	r3, #7
 8000926:	f200 8082 	bhi.w	8000a2e <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12a>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x2c>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000951 	.word	0x08000951
 8000934:	080009a3 	.word	0x080009a3
 8000938:	08000951 	.word	0x08000951
 800093c:	080009a3 	.word	0x080009a3
 8000940:	080009b9 	.word	0x080009b9
 8000944:	080009cf 	.word	0x080009cf
 8000948:	080009b9 	.word	0x080009b9
 800094c:	08000a19 	.word	0x08000a19
	{
		case NOPATH_FREE:
		case MIDPATH_FREE:
			if(left->GetDistance() <= right->GetDistance())
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff fd41 	bl	80003d8 <_ZN6HCSR0411GetDistanceEv>
 8000956:	4604      	mov	r4, r0
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fd3d 	bl	80003d8 <_ZN6HCSR0411GetDistanceEv>
 800095e:	4603      	mov	r3, r0
 8000960:	429c      	cmp	r4, r3
 8000962:	bf94      	ite	ls
 8000964:	2301      	movls	r3, #1
 8000966:	2300      	movhi	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00a      	beq.n	8000984 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x80>
			{
				leftMotor->MoveForward(24000);
 800096e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8000972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000974:	f000 f908 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
				rightMotor->MoveBackward(24000);
 8000978:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 800097c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800097e:	f000 f93e 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
 8000982:	e009      	b.n	8000998 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x94>
			}
			else
			{
				leftMotor->MoveBackward(24000);
 8000984:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8000988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800098a:	f000 f938 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
				rightMotor->MoveForward(24000);
 800098e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
 8000992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000994:	f000 f8f8 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			}
			HAL_Delay(500);
 8000998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099c:	f000 fa20 	bl	8000de0 <HAL_Delay>
			break;
 80009a0:	e046      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
		case RIGHTPATH_FREE:
		case RIGHT_AND_MIDPATH_FREE:
			leftMotor->MoveForward(MOTOR_FULLSPEED);
 80009a2:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80009a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009a8:	f000 f8ee 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			rightMotor->MoveBackward(MOTOR_HALFSPEED);
 80009ac:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009b2:	f000 f924 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
			break;
 80009b6:	e03b      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
		case LEFTPATH_FREE:
		case LEFT_AND_MIDPATH_FREE:
			rightMotor->MoveForward(MOTOR_FULLSPEED);
 80009b8:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80009bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009be:	f000 f8e3 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			leftMotor->MoveBackward(MOTOR_HALFSPEED);
 80009c2:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009c8:	f000 f919 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
			break;
 80009cc:	e030      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
		case LEFT_AND_RIGHTPATH_FREE:
			if(left->GetDistance() <= right->GetDistance())
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff fd02 	bl	80003d8 <_ZN6HCSR0411GetDistanceEv>
 80009d4:	4604      	mov	r4, r0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fcfe 	bl	80003d8 <_ZN6HCSR0411GetDistanceEv>
 80009dc:	4603      	mov	r3, r0
 80009de:	429c      	cmp	r4, r3
 80009e0:	bf94      	ite	ls
 80009e2:	2301      	movls	r3, #1
 80009e4:	2300      	movhi	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00a      	beq.n	8000a02 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0xfe>
			{
				leftMotor->MoveForward(MOTOR_FULLSPEED);
 80009ec:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80009f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009f2:	f000 f8c9 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
				rightMotor->MoveBackward(MOTOR_HALFSPEED);
 80009f6:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80009fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009fc:	f000 f8ff 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
			else
			{
				leftMotor->MoveBackward(MOTOR_HALFSPEED);
				rightMotor->MoveForward(MOTOR_FULLSPEED);
			}
			break;
 8000a00:	e016      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
				leftMotor->MoveBackward(MOTOR_HALFSPEED);
 8000a02:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a08:	f000 f8f9 	bl	8000bfe <_ZN5Motor12MoveBackwardEm>
				rightMotor->MoveForward(MOTOR_FULLSPEED);
 8000a0c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a12:	f000 f8b9 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			break;
 8000a16:	e00b      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
		case ALLPATHS_FREE:
			leftMotor->MoveForward(20000);
 8000a18:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a1e:	f000 f8b3 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			rightMotor->MoveForward(20000);
 8000a22:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a28:	f000 f8ae 	bl	8000b88 <_ZN5Motor11MoveForwardEm>
			break;
 8000a2c:	e000      	b.n	8000a30 <_Z14MoveToFreePathP6HCSR04S0_S0_PKmP5MotorS4_+0x12c>
		default:
			break;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}

08000a38 <_ZN5MotorC1EP11pinStruct_tS1_S1_P11TIM_TypeDefhh>:
 *      Author: barbog
 */

#include "motor.h"

Motor::Motor(pinStruct_t* motorPin1,
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
		  pinStruct_t* pwmPin,
		  TIM_TypeDef* TIMx,
		  uint8_t gpioAFSelTIMx,
		  uint8_t pwmChannel)
{
	pin1 = *motorPin1;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4e:	e883 0003 	stmia.w	r3, {r0, r1}
	pin2 = *motorPin2;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	3308      	adds	r3, #8
 8000a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a5c:	e883 0003 	stmia.w	r3, {r0, r1}
	pwmCh = pwmChannel;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8000a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	//GPIO config (PWM pin)
	GPIO_InitTypeDef GPIO_PWMInitStruct = {0};
 8000a6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
	GPIO_PWMInitStruct.Pin = pwmPin->selectedPin;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	889b      	ldrh	r3, [r3, #4]
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_PWMInitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_PWMInitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_PWMInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_PWMInitStruct.Alternate = gpioAFSelTIMx;
 8000a8c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000a90:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(pwmPin->port, &GPIO_PWMInitStruct);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 faa9 	bl	8000ff4 <HAL_GPIO_Init>

    //GPIO config (motor pin1)
    GPIO_InitTypeDef GPIO_Pin1InitStruct = {0};
 8000aa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
    GPIO_Pin1InitStruct.Pin = pin1.selectedPin;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_Pin1InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_Pin1InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_Pin1InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(pin1.port, &GPIO_Pin1InitStruct);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fa90 	bl	8000ff4 <HAL_GPIO_Init>

    //GPIO confih (motor pin2)
    GPIO_InitTypeDef GPIO_Pin2InitStruct = {0};
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
    GPIO_Pin2InitStruct.Pin = pin2.selectedPin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	899b      	ldrh	r3, [r3, #12]
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_Pin2InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_Pin2InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_Pin2InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(pin2.port, &GPIO_Pin2InitStruct);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fa77 	bl	8000ff4 <HAL_GPIO_Init>

    //TIM PWM config
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]
    htim.Instance = TIMx;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b1e:	611a      	str	r2, [r3, #16]
    htim.Init.Prescaler = 10 - 1;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2209      	movs	r2, #9
 8000b24:	615a      	str	r2, [r3, #20]
    htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
    htim.Init.Period = 32000 - 1; //20ms period
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000b32:	61da      	str	r2, [r3, #28]
    htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
    // htim.Init.RepetitionCounter = 0; // Check if this is needed
    htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_TIM_PWM_Init(&htim);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3310      	adds	r3, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fc02 	bl	800134e <HAL_TIM_PWM_Init>

    //PWM channel config
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4a:	2360      	movs	r3, #96	; 0x60
 8000b4c:	613b      	str	r3, [r7, #16]
    sConfigOC.Pulse = 24000; //default motor speed
 8000b4e:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000b52:	617b      	str	r3, [r7, #20]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
    HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, pwmChannel);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3310      	adds	r3, #16
 8000b60:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8000b64:	f107 0110 	add.w	r1, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fee3 	bl	8001934 <HAL_TIM_PWM_ConfigChannel>

    //Start PWM signal
    HAL_TIM_PWM_Start(&htim, pwmChannel);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3310      	adds	r3, #16
 8000b72:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc41 	bl	8001400 <HAL_TIM_PWM_Start>
}
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4618      	mov	r0, r3
 8000b82:	3768      	adds	r7, #104	; 0x68
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZN5Motor11MoveForwardEm>:

void Motor::MoveForward(uint32_t speed)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, speed);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <_ZN5Motor11MoveForwardEm+0x1e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba4:	e017      	b.n	8000bd6 <_ZN5Motor11MoveForwardEm+0x4e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d104      	bne.n	8000bba <_ZN5Motor11MoveForwardEm+0x32>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb8:	e00d      	b.n	8000bd6 <_ZN5Motor11MoveForwardEm+0x4e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d104      	bne.n	8000bce <_ZN5Motor11MoveForwardEm+0x46>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bcc:	e003      	b.n	8000bd6 <_ZN5Motor11MoveForwardEm+0x4e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(pin1.port, pin1.selectedPin, GPIO_PIN_RESET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	f000 fb9b 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pin2.port, pin2.selectedPin, GPIO_PIN_SET);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6898      	ldr	r0, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	899b      	ldrh	r3, [r3, #12]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f000 fb93 	bl	800131c <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_ZN5Motor12MoveBackwardEm>:

void Motor::MoveBackward(uint32_t speed)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim, pwmCh, speed);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <_ZN5Motor12MoveBackwardEm+0x1e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	e017      	b.n	8000c4c <_ZN5Motor12MoveBackwardEm+0x4e>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d104      	bne.n	8000c30 <_ZN5Motor12MoveBackwardEm+0x32>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c2e:	e00d      	b.n	8000c4c <_ZN5Motor12MoveBackwardEm+0x4e>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d104      	bne.n	8000c44 <_ZN5Motor12MoveBackwardEm+0x46>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c42:	e003      	b.n	8000c4c <_ZN5Motor12MoveBackwardEm+0x4e>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(pin1.port, pin1.selectedPin, GPIO_PIN_SET);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	889b      	ldrh	r3, [r3, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	f000 fb60 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pin2.port, pin2.selectedPin, GPIO_PIN_RESET);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6898      	ldr	r0, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	899b      	ldrh	r3, [r3, #12]
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	f000 fb58 	bl	800131c <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f001 fbf9 	bl	80024bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fbc7 	bl	800045c <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cdc:	08002590 	.word	0x08002590
  ldr r2, =_sbss
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ce4:	200001e8 	.word	0x200001e8

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f939 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 f810 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f000 f806 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f93b 	bl	8000fda <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f911 	bl	8000fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001e4 	.word	0x200001e4

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001e4 	.word	0x200001e4

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff47 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff5c 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffb0 	bl	8000f48 <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e165      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8154 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80ae 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <HAL_GPIO_Init+0x300>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a5c      	ldr	r2, [pc, #368]	; (80012f4 <HAL_GPIO_Init+0x300>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <HAL_GPIO_Init+0x300>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_GPIO_Init+0x304>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x308>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x30c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x310>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x20a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x206>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x202>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x304>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_GPIO_Init+0x324>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x324>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_GPIO_Init+0x324>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_GPIO_Init+0x324>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_GPIO_Init+0x324>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae96 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40013c00 	.word	0x40013c00

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e041      	b.n	80013e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f839 	bl	80013ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2202      	movs	r2, #2
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4610      	mov	r0, r2
 800138e:	f000 fbd5 	bl	8001b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <HAL_TIM_PWM_Start+0x24>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e022      	b.n	800146a <HAL_TIM_PWM_Start+0x6a>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d109      	bne.n	800143e <HAL_TIM_PWM_Start+0x3e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	e015      	b.n	800146a <HAL_TIM_PWM_Start+0x6a>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b08      	cmp	r3, #8
 8001442:	d109      	bne.n	8001458 <HAL_TIM_PWM_Start+0x58>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	bf14      	ite	ne
 8001450:	2301      	movne	r3, #1
 8001452:	2300      	moveq	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	e008      	b.n	800146a <HAL_TIM_PWM_Start+0x6a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e07c      	b.n	800156c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d104      	bne.n	8001482 <HAL_TIM_PWM_Start+0x82>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001480:	e013      	b.n	80014aa <HAL_TIM_PWM_Start+0xaa>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d104      	bne.n	8001492 <HAL_TIM_PWM_Start+0x92>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2202      	movs	r2, #2
 800148c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001490:	e00b      	b.n	80014aa <HAL_TIM_PWM_Start+0xaa>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d104      	bne.n	80014a2 <HAL_TIM_PWM_Start+0xa2>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014a0:	e003      	b.n	80014aa <HAL_TIM_PWM_Start+0xaa>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 ffcd 	bl	8002452 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <HAL_TIM_PWM_Start+0x174>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d004      	beq.n	80014cc <HAL_TIM_PWM_Start+0xcc>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <HAL_TIM_PWM_Start+0x178>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_TIM_PWM_Start+0xd0>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_TIM_PWM_Start+0xd2>
 80014d0:	2300      	movs	r3, #0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_TIM_PWM_Start+0x174>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d022      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f8:	d01d      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_TIM_PWM_Start+0x17c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d018      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_TIM_PWM_Start+0x180>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_TIM_PWM_Start+0x184>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00e      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a16      	ldr	r2, [pc, #88]	; (8001578 <HAL_TIM_PWM_Start+0x178>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d009      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_TIM_PWM_Start+0x188>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d004      	beq.n	8001536 <HAL_TIM_PWM_Start+0x136>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_TIM_PWM_Start+0x18c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d111      	bne.n	800155a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b06      	cmp	r3, #6
 8001546:	d010      	beq.n	800156a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001558:	e007      	b.n	800156a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40010000 	.word	0x40010000
 8001578:	40010400 	.word	0x40010400
 800157c:	40000400 	.word	0x40000400
 8001580:	40000800 	.word	0x40000800
 8001584:	40000c00 	.word	0x40000c00
 8001588:	40014000 	.word	0x40014000
 800158c:	40001800 	.word	0x40001800

08001590 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e041      	b.n	8001626 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f839 	bl	800162e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f000 fab4 	bl	8001b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <HAL_TIM_IC_Start+0x1a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800165a:	b2db      	uxtb	r3, r3
 800165c:	e013      	b.n	8001686 <HAL_TIM_IC_Start+0x42>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d104      	bne.n	800166e <HAL_TIM_IC_Start+0x2a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e00b      	b.n	8001686 <HAL_TIM_IC_Start+0x42>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d104      	bne.n	800167e <HAL_TIM_IC_Start+0x3a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800167a:	b2db      	uxtb	r3, r3
 800167c:	e003      	b.n	8001686 <HAL_TIM_IC_Start+0x42>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001684:	b2db      	uxtb	r3, r3
 8001686:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <HAL_TIM_IC_Start+0x54>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001694:	b2db      	uxtb	r3, r3
 8001696:	e013      	b.n	80016c0 <HAL_TIM_IC_Start+0x7c>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d104      	bne.n	80016a8 <HAL_TIM_IC_Start+0x64>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e00b      	b.n	80016c0 <HAL_TIM_IC_Start+0x7c>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d104      	bne.n	80016b8 <HAL_TIM_IC_Start+0x74>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e003      	b.n	80016c0 <HAL_TIM_IC_Start+0x7c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e081      	b.n	80017d6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <HAL_TIM_IC_Start+0x9e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016e0:	e013      	b.n	800170a <HAL_TIM_IC_Start+0xc6>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d104      	bne.n	80016f2 <HAL_TIM_IC_Start+0xae>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016f0:	e00b      	b.n	800170a <HAL_TIM_IC_Start+0xc6>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d104      	bne.n	8001702 <HAL_TIM_IC_Start+0xbe>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001700:	e003      	b.n	800170a <HAL_TIM_IC_Start+0xc6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d104      	bne.n	800171a <HAL_TIM_IC_Start+0xd6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001718:	e013      	b.n	8001742 <HAL_TIM_IC_Start+0xfe>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d104      	bne.n	800172a <HAL_TIM_IC_Start+0xe6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001728:	e00b      	b.n	8001742 <HAL_TIM_IC_Start+0xfe>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d104      	bne.n	800173a <HAL_TIM_IC_Start+0xf6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001738:	e003      	b.n	8001742 <HAL_TIM_IC_Start+0xfe>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fe81 	bl	8002452 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_TIM_IC_Start+0x19c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d022      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001762:	d01d      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_TIM_IC_Start+0x1a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d018      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_TIM_IC_Start+0x1a4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d013      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_TIM_IC_Start+0x1a8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00e      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_TIM_IC_Start+0x1ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_TIM_IC_Start+0x1b0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d004      	beq.n	80017a0 <HAL_TIM_IC_Start+0x15c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_TIM_IC_Start+0x1b4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d010      	beq.n	80017d4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017c2:	e007      	b.n	80017d4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40010000 	.word	0x40010000
 80017e4:	40000400 	.word	0x40000400
 80017e8:	40000800 	.word	0x40000800
 80017ec:	40000c00 	.word	0x40000c00
 80017f0:	40010400 	.word	0x40010400
 80017f4:	40014000 	.word	0x40014000
 80017f8:	40001800 	.word	0x40001800

080017fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_TIM_IC_ConfigChannel+0x1e>
 8001816:	2302      	movs	r3, #2
 8001818:	e088      	b.n	800192c <HAL_TIM_IC_ConfigChannel+0x130>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11b      	bne.n	8001860 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f000 fc62 	bl	8002100 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699a      	ldr	r2, [r3, #24]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 020c 	bic.w	r2, r2, #12
 800184a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6999      	ldr	r1, [r3, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	619a      	str	r2, [r3, #24]
 800185e:	e060      	b.n	8001922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d11c      	bne.n	80018a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f000 fce6 	bl	8002246 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001888:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6999      	ldr	r1, [r3, #24]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	021a      	lsls	r2, r3, #8
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	e040      	b.n	8001922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d11b      	bne.n	80018de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f000 fd33 	bl	8002320 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020c 	bic.w	r2, r2, #12
 80018c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69d9      	ldr	r1, [r3, #28]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	61da      	str	r2, [r3, #28]
 80018dc:	e021      	b.n	8001922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d11c      	bne.n	800191e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f000 fd50 	bl	8002398 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001906:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69d9      	ldr	r1, [r3, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	021a      	lsls	r2, r3, #8
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
 800191c:	e001      	b.n	8001922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800192a:	7dfb      	ldrb	r3, [r7, #23]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800194e:	2302      	movs	r3, #2
 8001950:	e0ae      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f200 809f 	bhi.w	8001aa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	0800199d 	.word	0x0800199d
 800196c:	08001aa1 	.word	0x08001aa1
 8001970:	08001aa1 	.word	0x08001aa1
 8001974:	08001aa1 	.word	0x08001aa1
 8001978:	080019dd 	.word	0x080019dd
 800197c:	08001aa1 	.word	0x08001aa1
 8001980:	08001aa1 	.word	0x08001aa1
 8001984:	08001aa1 	.word	0x08001aa1
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001aa1 	.word	0x08001aa1
 8001990:	08001aa1 	.word	0x08001aa1
 8001994:	08001aa1 	.word	0x08001aa1
 8001998:	08001a5f 	.word	0x08001a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f96a 	bl	8001c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0208 	orr.w	r2, r2, #8
 80019b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6999      	ldr	r1, [r3, #24]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	619a      	str	r2, [r3, #24]
      break;
 80019da:	e064      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9ba 	bl	8001d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6999      	ldr	r1, [r3, #24]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	021a      	lsls	r2, r3, #8
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	619a      	str	r2, [r3, #24]
      break;
 8001a1c:	e043      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fa0f 	bl	8001e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0208 	orr.w	r2, r2, #8
 8001a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0204 	bic.w	r2, r2, #4
 8001a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69d9      	ldr	r1, [r3, #28]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]
      break;
 8001a5c:	e023      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fa63 	bl	8001f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69d9      	ldr	r1, [r3, #28]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	61da      	str	r2, [r3, #28]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8001aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e031      	b.n	8001b34 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fa7a 	bl	8001fdc <TIM_SlaveTimer_SetConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e018      	b.n	8001b34 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b10:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b20:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <TIM_Base_SetConfig+0x114>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5a:	d00f      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <TIM_Base_SetConfig+0x118>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d00b      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <TIM_Base_SetConfig+0x11c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d007      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <TIM_Base_SetConfig+0x120>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d003      	beq.n	8001b7c <TIM_Base_SetConfig+0x40>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <TIM_Base_SetConfig+0x124>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d108      	bne.n	8001b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <TIM_Base_SetConfig+0x114>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d027      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <TIM_Base_SetConfig+0x118>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d023      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <TIM_Base_SetConfig+0x11c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <TIM_Base_SetConfig+0x120>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <TIM_Base_SetConfig+0x124>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d017      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <TIM_Base_SetConfig+0x128>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <TIM_Base_SetConfig+0x12c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00f      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <TIM_Base_SetConfig+0x130>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00b      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <TIM_Base_SetConfig+0x134>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <TIM_Base_SetConfig+0x138>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d003      	beq.n	8001bee <TIM_Base_SetConfig+0xb2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <TIM_Base_SetConfig+0x13c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d108      	bne.n	8001c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <TIM_Base_SetConfig+0x114>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <TIM_Base_SetConfig+0xf8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <TIM_Base_SetConfig+0x124>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d103      	bne.n	8001c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	615a      	str	r2, [r3, #20]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40010400 	.word	0x40010400
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40014400 	.word	0x40014400
 8001c6c:	40014800 	.word	0x40014800
 8001c70:	40001800 	.word	0x40001800
 8001c74:	40001c00 	.word	0x40001c00
 8001c78:	40002000 	.word	0x40002000

08001c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	f023 0201 	bic.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f023 0302 	bic.w	r3, r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a20      	ldr	r2, [pc, #128]	; (8001d54 <TIM_OC1_SetConfig+0xd8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d003      	beq.n	8001ce0 <TIM_OC1_SetConfig+0x64>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <TIM_OC1_SetConfig+0xdc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10c      	bne.n	8001cfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f023 0308 	bic.w	r3, r3, #8
 8001ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <TIM_OC1_SetConfig+0xd8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_OC1_SetConfig+0x8e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <TIM_OC1_SetConfig+0xdc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d111      	bne.n	8001d2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	621a      	str	r2, [r3, #32]
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40010400 	.word	0x40010400

08001d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	f023 0210 	bic.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0320 	bic.w	r3, r3, #32
 8001da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <TIM_OC2_SetConfig+0xe4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <TIM_OC2_SetConfig+0x68>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <TIM_OC2_SetConfig+0xe8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10d      	bne.n	8001de0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <TIM_OC2_SetConfig+0xe4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_OC2_SetConfig+0x94>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <TIM_OC2_SetConfig+0xe8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d113      	bne.n	8001e18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	621a      	str	r2, [r3, #32]
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010400 	.word	0x40010400

08001e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <TIM_OC3_SetConfig+0xe0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d003      	beq.n	8001eae <TIM_OC3_SetConfig+0x66>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <TIM_OC3_SetConfig+0xe4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10d      	bne.n	8001eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <TIM_OC3_SetConfig+0xe0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d003      	beq.n	8001eda <TIM_OC3_SetConfig+0x92>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <TIM_OC3_SetConfig+0xe4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d113      	bne.n	8001f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	621a      	str	r2, [r3, #32]
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40010400 	.word	0x40010400

08001f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	031b      	lsls	r3, r3, #12
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <TIM_OC4_SetConfig+0xa4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <TIM_OC4_SetConfig+0x68>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <TIM_OC4_SetConfig+0xa8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d109      	bne.n	8001fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	621a      	str	r2, [r3, #32]
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010400 	.word	0x40010400

08001fdc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f023 0307 	bic.w	r3, r3, #7
 800200a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b70      	cmp	r3, #112	; 0x70
 8002024:	d01a      	beq.n	800205c <TIM_SlaveTimer_SetConfig+0x80>
 8002026:	2b70      	cmp	r3, #112	; 0x70
 8002028:	d860      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 800202a:	2b60      	cmp	r3, #96	; 0x60
 800202c:	d054      	beq.n	80020d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800202e:	2b60      	cmp	r3, #96	; 0x60
 8002030:	d85c      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 8002032:	2b50      	cmp	r3, #80	; 0x50
 8002034:	d046      	beq.n	80020c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8002036:	2b50      	cmp	r3, #80	; 0x50
 8002038:	d858      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d019      	beq.n	8002072 <TIM_SlaveTimer_SetConfig+0x96>
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d854      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 8002042:	2b30      	cmp	r3, #48	; 0x30
 8002044:	d055      	beq.n	80020f2 <TIM_SlaveTimer_SetConfig+0x116>
 8002046:	2b30      	cmp	r3, #48	; 0x30
 8002048:	d850      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 800204a:	2b20      	cmp	r3, #32
 800204c:	d051      	beq.n	80020f2 <TIM_SlaveTimer_SetConfig+0x116>
 800204e:	2b20      	cmp	r3, #32
 8002050:	d84c      	bhi.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04d      	beq.n	80020f2 <TIM_SlaveTimer_SetConfig+0x116>
 8002056:	2b10      	cmp	r3, #16
 8002058:	d04b      	beq.n	80020f2 <TIM_SlaveTimer_SetConfig+0x116>
 800205a:	e047      	b.n	80020ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68d9      	ldr	r1, [r3, #12]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f000 f9d1 	bl	8002412 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002070:	e040      	b.n	80020f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d101      	bne.n	800207e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e03b      	b.n	80020f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	621a      	str	r2, [r3, #32]
      break;
 80020c2:	e017      	b.n	80020f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f000 f889 	bl	80021e8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80020d6:	e00d      	b.n	80020f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f000 f8eb 	bl	80022c0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80020ea:	e003      	b.n	80020f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	75fb      	strb	r3, [r7, #23]
      break;
 80020f0:	e000      	b.n	80020f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80020f2:	bf00      	nop
  }

  return status;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <TIM_TI1_SetConfig+0xcc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01b      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d017      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <TIM_TI1_SetConfig+0xd0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <TIM_TI1_SetConfig+0xd4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00f      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <TIM_TI1_SetConfig+0xd8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00b      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_TI1_SetConfig+0xdc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <TIM_TI1_SetConfig+0xe0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d003      	beq.n	8002166 <TIM_TI1_SetConfig+0x66>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <TIM_TI1_SetConfig+0xe4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <TIM_TI1_SetConfig+0x6a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <TIM_TI1_SetConfig+0x6c>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e003      	b.n	800218a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	b2db      	uxtb	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f023 030a 	bic.w	r3, r3, #10
 80021a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 030a 	and.w	r3, r3, #10
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	621a      	str	r2, [r3, #32]
}
 80021be:	bf00      	nop
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40001800 	.word	0x40001800

080021e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f023 0201 	bic.w	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f023 030a 	bic.w	r3, r3, #10
 8002224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	621a      	str	r2, [r3, #32]
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f023 0210 	bic.w	r2, r3, #16
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	031b      	lsls	r3, r3, #12
 800228a:	b29b      	uxth	r3, r3
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002298:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	621a      	str	r2, [r3, #32]
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 0210 	bic.w	r2, r3, #16
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	621a      	str	r2, [r3, #32]
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f023 0303 	bic.w	r3, r3, #3
 800234c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	b2db      	uxtb	r3, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002370:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	621a      	str	r2, [r3, #32]
}
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	031b      	lsls	r3, r3, #12
 80023dc:	b29b      	uxth	r3, r3
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80023ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	031b      	lsls	r3, r3, #12
 80023f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002412:	b480      	push	{r7}
 8002414:	b087      	sub	sp, #28
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	609a      	str	r2, [r3, #8]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002452:	b480      	push	{r7}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2201      	movs	r2, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	621a      	str	r2, [r3, #32]
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <__cxa_guard_acquire>:
 800249c:	6803      	ldr	r3, [r0, #0]
 800249e:	07db      	lsls	r3, r3, #31
 80024a0:	d406      	bmi.n	80024b0 <__cxa_guard_acquire+0x14>
 80024a2:	7843      	ldrb	r3, [r0, #1]
 80024a4:	b103      	cbz	r3, 80024a8 <__cxa_guard_acquire+0xc>
 80024a6:	deff      	udf	#255	; 0xff
 80024a8:	2301      	movs	r3, #1
 80024aa:	7043      	strb	r3, [r0, #1]
 80024ac:	4618      	mov	r0, r3
 80024ae:	4770      	bx	lr
 80024b0:	2000      	movs	r0, #0
 80024b2:	4770      	bx	lr

080024b4 <__cxa_guard_release>:
 80024b4:	2301      	movs	r3, #1
 80024b6:	6003      	str	r3, [r0, #0]
 80024b8:	4770      	bx	lr
	...

080024bc <__libc_init_array>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4d0d      	ldr	r5, [pc, #52]	; (80024f4 <__libc_init_array+0x38>)
 80024c0:	4c0d      	ldr	r4, [pc, #52]	; (80024f8 <__libc_init_array+0x3c>)
 80024c2:	1b64      	subs	r4, r4, r5
 80024c4:	10a4      	asrs	r4, r4, #2
 80024c6:	2600      	movs	r6, #0
 80024c8:	42a6      	cmp	r6, r4
 80024ca:	d109      	bne.n	80024e0 <__libc_init_array+0x24>
 80024cc:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <__libc_init_array+0x40>)
 80024ce:	4c0c      	ldr	r4, [pc, #48]	; (8002500 <__libc_init_array+0x44>)
 80024d0:	f000 f818 	bl	8002504 <_init>
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	2600      	movs	r6, #0
 80024da:	42a6      	cmp	r6, r4
 80024dc:	d105      	bne.n	80024ea <__libc_init_array+0x2e>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e4:	4798      	blx	r3
 80024e6:	3601      	adds	r6, #1
 80024e8:	e7ee      	b.n	80024c8 <__libc_init_array+0xc>
 80024ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ee:	4798      	blx	r3
 80024f0:	3601      	adds	r6, #1
 80024f2:	e7f2      	b.n	80024da <__libc_init_array+0x1e>
 80024f4:	08002588 	.word	0x08002588
 80024f8:	08002588 	.word	0x08002588
 80024fc:	08002588 	.word	0x08002588
 8002500:	0800258c 	.word	0x0800258c

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
