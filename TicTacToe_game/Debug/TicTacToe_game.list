
TicTacToe_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001634  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a20  08001a20  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001a20  08001a20  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a20  08001a20  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000018  08001a40  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001a40  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c19  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fc  00000000  00000000  00024c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00026060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00026458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217de  00000000  00000000  000267c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004bec  00000000  00000000  00047fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c207a  00000000  00000000  0004cb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ec0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea8  00000000  00000000  0010ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080017e0 	.word	0x080017e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080017e0 	.word	0x080017e0

08000204 <_ZL15UpdateGameBoardPcPA5_cPh>:
	bool winDetected;
	char winner;
}gameResult_t;

static void UpdateGameBoard(char* pressedKey, char gameBoard[Board::numberOfRows][Board::numberOfCols], uint8_t* gameBoardUpdateCounter)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
	bool playerMadeAnInput = false;
 8000210:	2300      	movs	r3, #0
 8000212:	75fb      	strb	r3, [r7, #23]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000214:	2300      	movs	r3, #0
 8000216:	75bb      	strb	r3, [r7, #22]
 8000218:	7dbb      	ldrb	r3, [r7, #22]
 800021a:	2b02      	cmp	r3, #2
 800021c:	d846      	bhi.n	80002ac <_ZL15UpdateGameBoardPcPA5_cPh+0xa8>
	{
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 800021e:	2300      	movs	r3, #0
 8000220:	757b      	strb	r3, [r7, #21]
 8000222:	7d7b      	ldrb	r3, [r7, #21]
 8000224:	2b04      	cmp	r3, #4
 8000226:	d839      	bhi.n	800029c <_ZL15UpdateGameBoardPcPA5_cPh+0x98>
		{
			if(*pressedKey == gameBoard[rowIndex][colIndex])
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	7819      	ldrb	r1, [r3, #0]
 800022c:	7dba      	ldrb	r2, [r7, #22]
 800022e:	4613      	mov	r3, r2
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	4413      	add	r3, r2
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	441a      	add	r2, r3
 8000238:	7d7b      	ldrb	r3, [r7, #21]
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	4299      	cmp	r1, r3
 800023e:	d129      	bne.n	8000294 <_ZL15UpdateGameBoardPcPA5_cPh+0x90>
			{
				(*gameBoardUpdateCounter)++;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	b2da      	uxtb	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	701a      	strb	r2, [r3, #0]
				switch(player)
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <_ZL15UpdateGameBoardPcPA5_cPh+0xb4>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d002      	beq.n	800025a <_ZL15UpdateGameBoardPcPA5_cPh+0x56>
 8000254:	2b01      	cmp	r3, #1
 8000256:	d00d      	beq.n	8000274 <_ZL15UpdateGameBoardPcPA5_cPh+0x70>
					case PLAYER_2:
						gameBoard[rowIndex][colIndex] = 'X';
						player = PLAYER_1;
						break;
					default:
						break;
 8000258:	e019      	b.n	800028e <_ZL15UpdateGameBoardPcPA5_cPh+0x8a>
						gameBoard[rowIndex][colIndex] = 'O';
 800025a:	7dba      	ldrb	r2, [r7, #22]
 800025c:	4613      	mov	r3, r2
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	4413      	add	r3, r2
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	441a      	add	r2, r3
 8000266:	7d7b      	ldrb	r3, [r7, #21]
 8000268:	214f      	movs	r1, #79	; 0x4f
 800026a:	54d1      	strb	r1, [r2, r3]
						player = PLAYER_2;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <_ZL15UpdateGameBoardPcPA5_cPh+0xb4>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
						break;
 8000272:	e00c      	b.n	800028e <_ZL15UpdateGameBoardPcPA5_cPh+0x8a>
						gameBoard[rowIndex][colIndex] = 'X';
 8000274:	7dba      	ldrb	r2, [r7, #22]
 8000276:	4613      	mov	r3, r2
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	4413      	add	r3, r2
 800027c:	68ba      	ldr	r2, [r7, #8]
 800027e:	441a      	add	r2, r3
 8000280:	7d7b      	ldrb	r3, [r7, #21]
 8000282:	2158      	movs	r1, #88	; 0x58
 8000284:	54d1      	strb	r1, [r2, r3]
						player = PLAYER_1;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <_ZL15UpdateGameBoardPcPA5_cPh+0xb4>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
						break;
 800028c:	bf00      	nop
				}
				playerMadeAnInput = true;
 800028e:	2301      	movs	r3, #1
 8000290:	75fb      	strb	r3, [r7, #23]
				break;
 8000292:	e003      	b.n	800029c <_ZL15UpdateGameBoardPcPA5_cPh+0x98>
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 8000294:	7d7b      	ldrb	r3, [r7, #21]
 8000296:	3301      	adds	r3, #1
 8000298:	757b      	strb	r3, [r7, #21]
 800029a:	e7c2      	b.n	8000222 <_ZL15UpdateGameBoardPcPA5_cPh+0x1e>
			}
		}
		if(playerMadeAnInput)
 800029c:	7dfb      	ldrb	r3, [r7, #23]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d103      	bne.n	80002aa <_ZL15UpdateGameBoardPcPA5_cPh+0xa6>
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 80002a2:	7dbb      	ldrb	r3, [r7, #22]
 80002a4:	3301      	adds	r3, #1
 80002a6:	75bb      	strb	r3, [r7, #22]
 80002a8:	e7b6      	b.n	8000218 <_ZL15UpdateGameBoardPcPA5_cPh+0x14>
		{
			break;
 80002aa:	bf00      	nop
		}
	}
}
 80002ac:	bf00      	nop
 80002ae:	371c      	adds	r7, #28
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	20000034 	.word	0x20000034

080002bc <_ZL16DisplayGameBoardP3LCDPA5_c>:

static void DisplayGameBoard(LCD* lcd, char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	uint8_t rowPos = 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	73fb      	strb	r3, [r7, #15]
	const uint8_t startingColumnPos = 7;
 80002ca:	2307      	movs	r3, #7
 80002cc:	733b      	strb	r3, [r7, #12]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	73bb      	strb	r3, [r7, #14]
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d821      	bhi.n	800031c <_ZL16DisplayGameBoardP3LCDPA5_c+0x60>
	{
		lcd->SetCursor(rowPos, startingColumnPos);
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	2207      	movs	r2, #7
 80002dc:	4619      	mov	r1, r3
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 fd62 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
		rowPos++;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	3301      	adds	r3, #1
 80002e8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	737b      	strb	r3, [r7, #13]
 80002ee:	7b7b      	ldrb	r3, [r7, #13]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d80f      	bhi.n	8000314 <_ZL16DisplayGameBoardP3LCDPA5_c+0x58>
		{
			lcd->Print(gameBoard[rowIndex][colIndex]);
 80002f4:	7bba      	ldrb	r2, [r7, #14]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	683a      	ldr	r2, [r7, #0]
 80002fe:	441a      	add	r2, r3
 8000300:	7b7b      	ldrb	r3, [r7, #13]
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 fd76 	bl	8000df8 <_ZN3LCD5PrintEc>
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 800030c:	7b7b      	ldrb	r3, [r7, #13]
 800030e:	3301      	adds	r3, #1
 8000310:	737b      	strb	r3, [r7, #13]
 8000312:	e7ec      	b.n	80002ee <_ZL16DisplayGameBoardP3LCDPA5_c+0x32>
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000314:	7bbb      	ldrb	r3, [r7, #14]
 8000316:	3301      	adds	r3, #1
 8000318:	73bb      	strb	r3, [r7, #14]
 800031a:	e7da      	b.n	80002d2 <_ZL16DisplayGameBoardP3LCDPA5_c+0x16>
		}
	}
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZL21CheckForHorizontalWinPA5_c>:

static gameResult_t CheckForHorizontalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 800032c:	2300      	movs	r3, #0
 800032e:	81bb      	strh	r3, [r7, #12]
	char startOfRow;
	uint8_t numberOfMatchingPlayerInputs = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	75fb      	strb	r3, [r7, #23]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000334:	2300      	movs	r3, #0
 8000336:	75bb      	strb	r3, [r7, #22]
 8000338:	7dbb      	ldrb	r3, [r7, #22]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d82e      	bhi.n	800039c <_ZL21CheckForHorizontalWinPA5_c+0x78>
	{
		startOfRow = gameBoard[rowIndex][0];
 800033e:	7dba      	ldrb	r2, [r7, #22]
 8000340:	4613      	mov	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	753b      	strb	r3, [r7, #20]
		for(uint8_t colIndex = 2; colIndex < Board::numberOfCols; colIndex+=2)
 800034e:	2302      	movs	r3, #2
 8000350:	757b      	strb	r3, [r7, #21]
 8000352:	7d7b      	ldrb	r3, [r7, #21]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d811      	bhi.n	800037c <_ZL21CheckForHorizontalWinPA5_c+0x58>
		{
			if(startOfRow == gameBoard[rowIndex][colIndex])
 8000358:	7dba      	ldrb	r2, [r7, #22]
 800035a:	4613      	mov	r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	441a      	add	r2, r3
 8000364:	7d7b      	ldrb	r3, [r7, #21]
 8000366:	5cd3      	ldrb	r3, [r2, r3]
 8000368:	7d3a      	ldrb	r2, [r7, #20]
 800036a:	429a      	cmp	r2, r3
 800036c:	d102      	bne.n	8000374 <_ZL21CheckForHorizontalWinPA5_c+0x50>
			{
				numberOfMatchingPlayerInputs++;
 800036e:	7dfb      	ldrb	r3, [r7, #23]
 8000370:	3301      	adds	r3, #1
 8000372:	75fb      	strb	r3, [r7, #23]
		for(uint8_t colIndex = 2; colIndex < Board::numberOfCols; colIndex+=2)
 8000374:	7d7b      	ldrb	r3, [r7, #21]
 8000376:	3302      	adds	r3, #2
 8000378:	757b      	strb	r3, [r7, #21]
 800037a:	e7ea      	b.n	8000352 <_ZL21CheckForHorizontalWinPA5_c+0x2e>
			}
		}
		if(numberOfMatchingPlayerInputs == 2)
 800037c:	7dfb      	ldrb	r3, [r7, #23]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d106      	bne.n	8000390 <_ZL21CheckForHorizontalWinPA5_c+0x6c>
		{
			result.winDetected = true;
 8000382:	2301      	movs	r3, #1
 8000384:	733b      	strb	r3, [r7, #12]
			result.winner = startOfRow;
 8000386:	7d3b      	ldrb	r3, [r7, #20]
 8000388:	737b      	strb	r3, [r7, #13]
			return result;
 800038a:	89bb      	ldrh	r3, [r7, #12]
 800038c:	823b      	strh	r3, [r7, #16]
 800038e:	e007      	b.n	80003a0 <_ZL21CheckForHorizontalWinPA5_c+0x7c>
		}
		else
		{
			numberOfMatchingPlayerInputs = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	75fb      	strb	r3, [r7, #23]
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000394:	7dbb      	ldrb	r3, [r7, #22]
 8000396:	3301      	adds	r3, #1
 8000398:	75bb      	strb	r3, [r7, #22]
 800039a:	e7cd      	b.n	8000338 <_ZL21CheckForHorizontalWinPA5_c+0x14>
		}
	}
	return result;
 800039c:	89bb      	ldrh	r3, [r7, #12]
 800039e:	823b      	strh	r3, [r7, #16]
}
 80003a0:	2300      	movs	r3, #0
 80003a2:	7c3a      	ldrb	r2, [r7, #16]
 80003a4:	f362 0307 	bfi	r3, r2, #0, #8
 80003a8:	7c7a      	ldrb	r2, [r7, #17]
 80003aa:	f362 230f 	bfi	r3, r2, #8, #8
 80003ae:	4618      	mov	r0, r3
 80003b0:	371c      	adds	r7, #28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <_ZL19CheckForVerticalWinPA5_c>:

static gameResult_t CheckForVerticalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 80003ba:	b480      	push	{r7}
 80003bc:	b087      	sub	sp, #28
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 80003c2:	2300      	movs	r3, #0
 80003c4:	81bb      	strh	r3, [r7, #12]
	char startOfColumn;
	uint8_t numberOfMatchingPlayerInputs = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	75fb      	strb	r3, [r7, #23]

	for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex+=2)
 80003ca:	2300      	movs	r3, #0
 80003cc:	75bb      	strb	r3, [r7, #22]
 80003ce:	7dbb      	ldrb	r3, [r7, #22]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d82a      	bhi.n	800042a <_ZL19CheckForVerticalWinPA5_c+0x70>
	{
		startOfColumn = gameBoard[0][colIndex];
 80003d4:	7dbb      	ldrb	r3, [r7, #22]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	5cd3      	ldrb	r3, [r2, r3]
 80003da:	753b      	strb	r3, [r7, #20]
		for(uint8_t rowIndex = 1; rowIndex < Board::numberOfRows; rowIndex++)
 80003dc:	2301      	movs	r3, #1
 80003de:	757b      	strb	r3, [r7, #21]
 80003e0:	7d7b      	ldrb	r3, [r7, #21]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d811      	bhi.n	800040a <_ZL19CheckForVerticalWinPA5_c+0x50>
		{
			if(startOfColumn == gameBoard[rowIndex][colIndex])
 80003e6:	7d7a      	ldrb	r2, [r7, #21]
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	441a      	add	r2, r3
 80003f2:	7dbb      	ldrb	r3, [r7, #22]
 80003f4:	5cd3      	ldrb	r3, [r2, r3]
 80003f6:	7d3a      	ldrb	r2, [r7, #20]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d102      	bne.n	8000402 <_ZL19CheckForVerticalWinPA5_c+0x48>
			{
				numberOfMatchingPlayerInputs++;
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
		for(uint8_t rowIndex = 1; rowIndex < Board::numberOfRows; rowIndex++)
 8000402:	7d7b      	ldrb	r3, [r7, #21]
 8000404:	3301      	adds	r3, #1
 8000406:	757b      	strb	r3, [r7, #21]
 8000408:	e7ea      	b.n	80003e0 <_ZL19CheckForVerticalWinPA5_c+0x26>
			}
		}
		if(numberOfMatchingPlayerInputs == 2)
 800040a:	7dfb      	ldrb	r3, [r7, #23]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d106      	bne.n	800041e <_ZL19CheckForVerticalWinPA5_c+0x64>
		{
			result.winDetected = true;
 8000410:	2301      	movs	r3, #1
 8000412:	733b      	strb	r3, [r7, #12]
			result.winner = startOfColumn;
 8000414:	7d3b      	ldrb	r3, [r7, #20]
 8000416:	737b      	strb	r3, [r7, #13]
			return result;
 8000418:	89bb      	ldrh	r3, [r7, #12]
 800041a:	823b      	strh	r3, [r7, #16]
 800041c:	e007      	b.n	800042e <_ZL19CheckForVerticalWinPA5_c+0x74>
		}
		else
		{
			numberOfMatchingPlayerInputs = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	75fb      	strb	r3, [r7, #23]
	for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex+=2)
 8000422:	7dbb      	ldrb	r3, [r7, #22]
 8000424:	3302      	adds	r3, #2
 8000426:	75bb      	strb	r3, [r7, #22]
 8000428:	e7d1      	b.n	80003ce <_ZL19CheckForVerticalWinPA5_c+0x14>
		}
	}
	return result;
 800042a:	89bb      	ldrh	r3, [r7, #12]
 800042c:	823b      	strh	r3, [r7, #16]
}
 800042e:	2300      	movs	r3, #0
 8000430:	7c3a      	ldrb	r2, [r7, #16]
 8000432:	f362 0307 	bfi	r3, r2, #0, #8
 8000436:	7c7a      	ldrb	r2, [r7, #17]
 8000438:	f362 230f 	bfi	r3, r2, #8, #8
 800043c:	4618      	mov	r0, r3
 800043e:	371c      	adds	r7, #28
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <_ZL19CheckForDiagonalWinPA5_c>:

static gameResult_t CheckForDiagonalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 8000450:	2300      	movs	r3, #0
 8000452:	813b      	strh	r3, [r7, #8]
	// Back slash diagonal: '\'
	if((gameBoard[0][0] == gameBoard[1][2]) && (gameBoard[0][0] == gameBoard[2][4]))
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3305      	adds	r3, #5
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	429a      	cmp	r2, r3
 8000460:	d10e      	bne.n	8000480 <_ZL19CheckForDiagonalWinPA5_c+0x38>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	330a      	adds	r3, #10
 800046a:	791b      	ldrb	r3, [r3, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	d107      	bne.n	8000480 <_ZL19CheckForDiagonalWinPA5_c+0x38>
	{
		result.winDetected = true;
 8000470:	2301      	movs	r3, #1
 8000472:	723b      	strb	r3, [r7, #8]
		result.winner = gameBoard[0][0];
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	727b      	strb	r3, [r7, #9]
		return result;
 800047a:	893b      	ldrh	r3, [r7, #8]
 800047c:	81bb      	strh	r3, [r7, #12]
 800047e:	e017      	b.n	80004b0 <_ZL19CheckForDiagonalWinPA5_c+0x68>
	}
	// Forward slash diagonal: '/'
	if((gameBoard[0][4] == gameBoard[1][2]) && (gameBoard[0][4] == gameBoard[2][0]))
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791a      	ldrb	r2, [r3, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3305      	adds	r3, #5
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	429a      	cmp	r2, r3
 800048c:	d10e      	bne.n	80004ac <_ZL19CheckForDiagonalWinPA5_c+0x64>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791a      	ldrb	r2, [r3, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	330a      	adds	r3, #10
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	429a      	cmp	r2, r3
 800049a:	d107      	bne.n	80004ac <_ZL19CheckForDiagonalWinPA5_c+0x64>
	{
		result.winDetected = true;
 800049c:	2301      	movs	r3, #1
 800049e:	723b      	strb	r3, [r7, #8]
		result.winner = gameBoard[0][4];
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	727b      	strb	r3, [r7, #9]
		return result;
 80004a6:	893b      	ldrh	r3, [r7, #8]
 80004a8:	81bb      	strh	r3, [r7, #12]
 80004aa:	e001      	b.n	80004b0 <_ZL19CheckForDiagonalWinPA5_c+0x68>
	}
	return result;
 80004ac:	893b      	ldrh	r3, [r7, #8]
 80004ae:	81bb      	strh	r3, [r7, #12]
}
 80004b0:	2300      	movs	r3, #0
 80004b2:	7b3a      	ldrb	r2, [r7, #12]
 80004b4:	f362 0307 	bfi	r3, r2, #0, #8
 80004b8:	7b7a      	ldrb	r2, [r7, #13]
 80004ba:	f362 230f 	bfi	r3, r2, #8, #8
 80004be:	4618      	mov	r0, r3
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <_Z17Game_DisplayIntroP3LCD>:

//Extern functions

void Game_DisplayIntro(LCD* lcd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 fcac 	bl	8000e32 <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2100      	movs	r1, #0
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 fc62 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   WELCOME      |");
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <_Z17Game_DisplayIntroP3LCD+0x60>)
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 fc96 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 fc59 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   TO THE       |");
 80004f6:	490e      	ldr	r1, [pc, #56]	; (8000530 <_Z17Game_DisplayIntroP3LCD+0x64>)
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 fc8d 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 fc50 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   TIC TAC TOE  |");
 8000508:	490a      	ldr	r1, [pc, #40]	; (8000534 <_Z17Game_DisplayIntroP3LCD+0x68>)
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 fc84 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	2103      	movs	r1, #3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 fc47 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   GAME         |");
 800051a:	4907      	ldr	r1, [pc, #28]	; (8000538 <_Z17Game_DisplayIntroP3LCD+0x6c>)
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 fc7b 	bl	8000e18 <_ZN3LCD5PrintEPKc>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	080017f8 	.word	0x080017f8
 8000530:	0800180c 	.word	0x0800180c
 8000534:	08001820 	.word	0x08001820
 8000538:	08001834 	.word	0x08001834

0800053c <_Z16Game_DisplayMenuP3LCD>:

void Game_DisplayMenu(LCD* lcd)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 fc74 	bl	8000e32 <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 3);
 800054a:	2203      	movs	r2, #3
 800054c:	2100      	movs	r1, #0
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 fc2a 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Game menu");
 8000554:	4911      	ldr	r1, [pc, #68]	; (800059c <_Z16Game_DisplayMenuP3LCD+0x60>)
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 fc5e 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 fc21 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("1|2|3   A:Start");
 8000566:	490e      	ldr	r1, [pc, #56]	; (80005a0 <_Z16Game_DisplayMenuP3LCD+0x64>)
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 fc55 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2102      	movs	r1, #2
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 fc18 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("4|5|6   B:Back/Exit");
 8000578:	490a      	ldr	r1, [pc, #40]	; (80005a4 <_Z16Game_DisplayMenuP3LCD+0x68>)
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 fc4c 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2103      	movs	r1, #3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fc0f 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("7|8|9   #:Rules");
 800058a:	4907      	ldr	r1, [pc, #28]	; (80005a8 <_Z16Game_DisplayMenuP3LCD+0x6c>)
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fc43 	bl	8000e18 <_ZN3LCD5PrintEPKc>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08001848 	.word	0x08001848
 80005a0:	08001854 	.word	0x08001854
 80005a4:	08001864 	.word	0x08001864
 80005a8:	08001878 	.word	0x08001878

080005ac <_Z17Game_DisplayRulesP3LCD>:

void Game_DisplayRules(LCD* lcd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 fc3c 	bl	8000e32 <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 5);
 80005ba:	2205      	movs	r2, #5
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 fbf2 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Rule(1/2)");
 80005c4:	4926      	ldr	r1, [pc, #152]	; (8000660 <_Z17Game_DisplayRulesP3LCD+0xb4>)
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fc26 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 fbe9 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Press the numbers");
 80005d6:	4923      	ldr	r1, [pc, #140]	; (8000664 <_Z17Game_DisplayRulesP3LCD+0xb8>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fc1d 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2102      	movs	r1, #2
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 fbe0 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("to place X or O to");
 80005e8:	491f      	ldr	r1, [pc, #124]	; (8000668 <_Z17Game_DisplayRulesP3LCD+0xbc>)
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 fc14 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2103      	movs	r1, #3
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 fbd7 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("the game board");
 80005fa:	491c      	ldr	r1, [pc, #112]	; (800066c <_Z17Game_DisplayRulesP3LCD+0xc0>)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fc0b 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	HAL_Delay(3000);
 8000602:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000606:	f000 fde1 	bl	80011cc <HAL_Delay>
	lcd->Clear();
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fc11 	bl	8000e32 <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 5);
 8000610:	2205      	movs	r2, #5
 8000612:	2100      	movs	r1, #0
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fbc7 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Rule(2/2)");
 800061a:	4915      	ldr	r1, [pc, #84]	; (8000670 <_Z17Game_DisplayRulesP3LCD+0xc4>)
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fbfb 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fbbe 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("O is to player 1");
 800062c:	4911      	ldr	r1, [pc, #68]	; (8000674 <_Z17Game_DisplayRulesP3LCD+0xc8>)
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 fbf2 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fbb5 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("X is to player 2");
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <_Z17Game_DisplayRulesP3LCD+0xcc>)
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 fbe9 	bl	8000e18 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2103      	movs	r1, #3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 fbac 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Players take turns");
 8000650:	490a      	ldr	r1, [pc, #40]	; (800067c <_Z17Game_DisplayRulesP3LCD+0xd0>)
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 fbe0 	bl	8000e18 <_ZN3LCD5PrintEPKc>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08001888 	.word	0x08001888
 8000664:	08001894 	.word	0x08001894
 8000668:	080018a8 	.word	0x080018a8
 800066c:	080018bc 	.word	0x080018bc
 8000670:	080018cc 	.word	0x080018cc
 8000674:	080018d8 	.word	0x080018d8
 8000678:	080018ec 	.word	0x080018ec
 800067c:	08001900 	.word	0x08001900

08000680 <_Z10Game_StartP3LCDP6Keypad>:

void Game_Start(LCD* lcd, Keypad* keypad)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	lcd->Clear();
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 fbd1 	bl	8000e32 <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 4);
 8000690:	2204      	movs	r2, #4
 8000692:	2100      	movs	r1, #0
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 fb87 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
	lcd->Print("TIC TAC TOE");
 800069a:	4935      	ldr	r1, [pc, #212]	; (8000770 <_Z10Game_StartP3LCDP6Keypad+0xf0>)
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 fbbb 	bl	8000e18 <_ZN3LCD5PrintEPKc>

	char gameBoard[Board::numberOfRows][Board::numberOfCols] =
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <_Z10Game_StartP3LCDP6Keypad+0xf4>)
 80006a4:	f107 0410 	add.w	r4, r7, #16
 80006a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006aa:	c407      	stmia	r4!, {r0, r1, r2}
 80006ac:	8023      	strh	r3, [r4, #0]
 80006ae:	3402      	adds	r4, #2
 80006b0:	0c1b      	lsrs	r3, r3, #16
 80006b2:	7023      	strb	r3, [r4, #0]
		{'1', '|', '2', '|', '3'},
		{'4', '|', '5', '|', '6'},
		{'7', '|', '8', '|', '9'}
	};

	uint8_t gameBoardUpdateCounter = 0;	//If this counter reaches value 9 - there is no winner
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
	};

	//Game loop
	while(1)
	{
		DisplayGameBoard(lcd, gameBoard);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fdfc 	bl	80002bc <_ZL16DisplayGameBoardP3LCDPA5_c>
		char pressedKey = keypad->GetCharShortPress();
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f000 f9a1 	bl	8000a0c <_ZN6Keypad17GetCharShortPressEv>
 80006ca:	4603      	mov	r3, r0
 80006cc:	73bb      	strb	r3, [r7, #14]

		if(pressedKey == 'B')
 80006ce:	7bbb      	ldrb	r3, [r7, #14]
 80006d0:	2b42      	cmp	r3, #66	; 0x42
 80006d2:	d106      	bne.n	80006e2 <_Z10Game_StartP3LCDP6Keypad+0x62>
		{ //Exit game
			Game_DisplayMenu(lcd);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff31 	bl	800053c <_Z16Game_DisplayMenuP3LCD>
			player = PLAYER_1; //Return first player status to player 1
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <_Z10Game_StartP3LCDP6Keypad+0xf8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
			break;
 80006e0:	e041      	b.n	8000766 <_Z10Game_StartP3LCDP6Keypad+0xe6>
		}

		UpdateGameBoard(&pressedKey, gameBoard, &gameBoardUpdateCounter);
 80006e2:	f107 020f 	add.w	r2, r7, #15
 80006e6:	f107 0110 	add.w	r1, r7, #16
 80006ea:	f107 030e 	add.w	r3, r7, #14
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd88 	bl	8000204 <_ZL15UpdateGameBoardPcPA5_cPh>

		if(gameBoardUpdateCounter >= 9)
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d909      	bls.n	800070e <_Z10Game_StartP3LCDP6Keypad+0x8e>
		{
			lcd->SetCursor(1, 13);
 80006fa:	220d      	movs	r2, #13
 80006fc:	2101      	movs	r1, #1
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 fb52 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
			lcd->Print("Draw");
 8000704:	491d      	ldr	r1, [pc, #116]	; (800077c <_Z10Game_StartP3LCDP6Keypad+0xfc>)
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 fb86 	bl	8000e18 <_ZN3LCD5PrintEPKc>
			break;
 800070c:	e02b      	b.n	8000766 <_Z10Game_StartP3LCDP6Keypad+0xe6>
		}

		for(uint8_t i= 0; i < 3; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	77fb      	strb	r3, [r7, #31]
 8000712:	7ffb      	ldrb	r3, [r7, #31]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d8cf      	bhi.n	80006b8 <_Z10Game_StartP3LCDP6Keypad+0x38>
		{
			gameResult_t result = CheckWin[i](gameBoard);
 8000718:	7ffb      	ldrb	r3, [r7, #31]
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <_Z10Game_StartP3LCDP6Keypad+0x100>)
 800071c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000720:	f107 0210 	add.w	r2, r7, #16
 8000724:	4610      	mov	r0, r2
 8000726:	4798      	blx	r3
 8000728:	4603      	mov	r3, r0
 800072a:	81bb      	strh	r3, [r7, #12]
			if(result.winDetected)
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d014      	beq.n	800075c <_Z10Game_StartP3LCDP6Keypad+0xdc>
			{
				lcd->SetCursor(1, 13);
 8000732:	220d      	movs	r2, #13
 8000734:	2101      	movs	r1, #1
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 fb36 	bl	8000da8 <_ZN3LCD9SetCursorEhh>
				if(result.winner == 'O')
 800073c:	7b7b      	ldrb	r3, [r7, #13]
 800073e:	2b4f      	cmp	r3, #79	; 0x4f
 8000740:	d104      	bne.n	800074c <_Z10Game_StartP3LCDP6Keypad+0xcc>
				{
					lcd->Print("P1 wins");
 8000742:	4910      	ldr	r1, [pc, #64]	; (8000784 <_Z10Game_StartP3LCDP6Keypad+0x104>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fb67 	bl	8000e18 <_ZN3LCD5PrintEPKc>
					break;
 800074a:	e00b      	b.n	8000764 <_Z10Game_StartP3LCDP6Keypad+0xe4>
				}
				else if(result.winner == 'X')
 800074c:	7b7b      	ldrb	r3, [r7, #13]
 800074e:	2b58      	cmp	r3, #88	; 0x58
 8000750:	d104      	bne.n	800075c <_Z10Game_StartP3LCDP6Keypad+0xdc>
				{
					lcd->Print("P2 wins");
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <_Z10Game_StartP3LCDP6Keypad+0x108>)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fb5f 	bl	8000e18 <_ZN3LCD5PrintEPKc>
					break;
 800075a:	e003      	b.n	8000764 <_Z10Game_StartP3LCDP6Keypad+0xe4>
		for(uint8_t i= 0; i < 3; i++)
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	3301      	adds	r3, #1
 8000760:	77fb      	strb	r3, [r7, #31]
 8000762:	e7d6      	b.n	8000712 <_Z10Game_StartP3LCDP6Keypad+0x92>
				}
			}
		}
	}
 8000764:	e7a8      	b.n	80006b8 <_Z10Game_StartP3LCDP6Keypad+0x38>
}
 8000766:	bf00      	nop
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	08001914 	.word	0x08001914
 8000774:	08001938 	.word	0x08001938
 8000778:	20000034 	.word	0x20000034
 800077c:	08001920 	.word	0x08001920
 8000780:	20000000 	.word	0x20000000
 8000784:	08001928 	.word	0x08001928
 8000788:	08001930 	.word	0x08001930

0800078c <_ZN6Keypad9SelectRowEh>:
	{'7' ,'8', '9', 'C'},
	{'*', '0', '#', 'D'}
};

void Keypad::SelectRow(uint8_t pinIndex)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d828      	bhi.n	80007f4 <_ZN6Keypad9SelectRowEh+0x68>
	{
		if(i == pinIndex)
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d110      	bne.n	80007cc <_ZN6Keypad9SelectRowEh+0x40>
		{
			HAL_GPIO_WritePin(pRow[i].port, pRow[i].selectedPin, GPIO_PIN_RESET);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	4413      	add	r3, r2
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4413      	add	r3, r2
 80007c0:	889b      	ldrh	r3, [r3, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	f000 ffb7 	bl	8001738 <HAL_GPIO_WritePin>
 80007ca:	e00f      	b.n	80007ec <_ZN6Keypad9SelectRowEh+0x60>
		}
		else
		{
			HAL_GPIO_WritePin(pRow[i].port, pRow[i].selectedPin, GPIO_PIN_SET);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	889b      	ldrh	r3, [r3, #4]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f000 ffa6 	bl	8001738 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	3301      	adds	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e7d3      	b.n	800079c <_ZN6Keypad9SelectRowEh+0x10>
		}
	}
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN6Keypad11IsDebouncedEh>:

bool Keypad::IsDebounced(uint8_t pinIndex)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	if(HAL_GPIO_ReadPin(pCol[pinIndex].port, pCol[pinIndex].selectedPin) == GPIO_PIN_RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	f000 ff71 	bl	8001708 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	bf0c      	ite	eq
 800082c:	2301      	moveq	r3, #1
 800082e:	2300      	movne	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d01b      	beq.n	800086e <_ZN6Keypad11IsDebouncedEh+0x72>
	{
		HAL_Delay(15);
 8000836:	200f      	movs	r0, #15
 8000838:	f000 fcc8 	bl	80011cc <HAL_Delay>
		if(HAL_GPIO_ReadPin(pCol[pinIndex].port, pCol[pinIndex].selectedPin) == GPIO_PIN_RESET)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	4413      	add	r3, r2
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4413      	add	r3, r2
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	4619      	mov	r1, r3
 8000856:	f000 ff57 	bl	8001708 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <_ZN6Keypad11IsDebouncedEh+0x72>
		{
			return true;
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <_ZN6Keypad11IsDebouncedEh+0x74>
		}
	}
	return false;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZN6KeypadC1EP11pinStruct_tS1_>:

Keypad::Keypad(pinStruct_t* pRowPins, pinStruct_t* pColumsPins)
 8000878:	b580      	push	{r7, lr}
 800087a:	b0ae      	sub	sp, #184	; 0xb8
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
{
	GPIO_InitTypeDef rowPinInitStruct[NUMBER_OF_ROWS] = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2250      	movs	r2, #80	; 0x50
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f000 ff9f 	bl	80017d0 <memset>
	GPIO_InitTypeDef columnPinInitStruct[NUMBER_OF_COLUMNS] = {0};
 8000892:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000896:	2250      	movs	r2, #80	; 0x50
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff98 	bl	80017d0 <memset>
	pRow = pRowPins;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	pCol = pColumsPins;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80008b2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d81d      	bhi.n	80008f6 <_ZN6KeypadC1EP11pinStruct_tS1_+0x7e>
	{
		for(uint8_t j = 0; j < NUMBER_OF_COLUMNS; j++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80008c0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d810      	bhi.n	80008ea <_ZN6KeypadC1EP11pinStruct_tS1_+0x72>
		{
			pinPrevPressed[i][j] = false;
 80008c8:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80008cc:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	440a      	add	r2, r1
 80008d6:	4413      	add	r3, r2
 80008d8:	3308      	adds	r3, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < NUMBER_OF_COLUMNS; j++)
 80008de:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80008e2:	3301      	adds	r3, #1
 80008e4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80008e8:	e7ea      	b.n	80008c0 <_ZN6KeypadC1EP11pinStruct_tS1_+0x48>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80008ea:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80008f4:	e7dd      	b.n	80008b2 <_ZN6KeypadC1EP11pinStruct_tS1_+0x3a>
		}
	}

	// Initialize rows
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80008fc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8000900:	2b03      	cmp	r3, #3
 8000902:	d835      	bhi.n	8000970 <_ZN6KeypadC1EP11pinStruct_tS1_+0xf8>
	{
		rowPinInitStruct[i].Pin = pRow[i].selectedPin;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4413      	add	r3, r2
 8000910:	889b      	ldrh	r3, [r3, #4]
 8000912:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8000916:	4619      	mov	r1, r3
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	33b8      	adds	r3, #184	; 0xb8
 8000922:	443b      	add	r3, r7
 8000924:	3ba4      	subs	r3, #164	; 0xa4
 8000926:	6019      	str	r1, [r3, #0]
		rowPinInitStruct[i].Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	33b8      	adds	r3, #184	; 0xb8
 8000936:	443b      	add	r3, r7
 8000938:	3ba0      	subs	r3, #160	; 0xa0
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(pRow[i].port, &rowPinInitStruct[i]);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4413      	add	r3, r2
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	4619      	mov	r1, r3
 8000960:	f000 fd3e 	bl	80013e0 <HAL_GPIO_Init>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000964:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8000968:	3301      	adds	r3, #1
 800096a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800096e:	e7c5      	b.n	80008fc <_ZN6KeypadC1EP11pinStruct_tS1_+0x84>
	}

	// Initialize columns
	for(uint8_t i = 0; i < NUMBER_OF_COLUMNS; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8000976:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800097a:	2b03      	cmp	r3, #3
 800097c:	d840      	bhi.n	8000a00 <_ZN6KeypadC1EP11pinStruct_tS1_+0x188>
	{
		columnPinInitStruct[i].Pin = pCol[i].selectedPin;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4413      	add	r3, r2
 800098a:	889b      	ldrh	r3, [r3, #4]
 800098c:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 8000990:	4619      	mov	r1, r3
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	33b8      	adds	r3, #184	; 0xb8
 800099c:	443b      	add	r3, r7
 800099e:	3b54      	subs	r3, #84	; 0x54
 80009a0:	6019      	str	r1, [r3, #0]
		columnPinInitStruct[i].Mode = GPIO_MODE_INPUT;
 80009a2:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	33b8      	adds	r3, #184	; 0xb8
 80009b0:	443b      	add	r3, r7
 80009b2:	3b50      	subs	r3, #80	; 0x50
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
		columnPinInitStruct[i].Pull = GPIO_PULLUP;
 80009b8:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	33b8      	adds	r3, #184	; 0xb8
 80009c6:	443b      	add	r3, r7
 80009c8:	3b4c      	subs	r3, #76	; 0x4c
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(pCol[i].port, &columnPinInitStruct[i]);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80009e0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	440b      	add	r3, r1
 80009ee:	4619      	mov	r1, r3
 80009f0:	f000 fcf6 	bl	80013e0 <HAL_GPIO_Init>
	for(uint8_t i = 0; i < NUMBER_OF_COLUMNS; i++)
 80009f4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80009f8:	3301      	adds	r3, #1
 80009fa:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80009fe:	e7ba      	b.n	8000976 <_ZN6KeypadC1EP11pinStruct_tS1_+0xfe>
	}
}
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4618      	mov	r0, r3
 8000a04:	37b8      	adds	r7, #184	; 0xb8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_ZN6Keypad17GetCharShortPressEv>:

char Keypad::GetCharShortPress(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d85f      	bhi.n	8000ade <_ZN6Keypad17GetCharShortPressEv+0xd2>
	{
		Keypad::SelectRow(i);
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff feb2 	bl	800078c <_ZN6Keypad9SelectRowEh>
		for(uint8_t j = 0; j < NUMBER_OF_ROWS; j++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73bb      	strb	r3, [r7, #14]
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d851      	bhi.n	8000ad6 <_ZN6Keypad17GetCharShortPressEv+0xca>
		{
			if(Keypad::IsDebounced(j) && !pinPrevPressed[i][j])
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fee0 	bl	80007fc <_ZN6Keypad11IsDebouncedEh>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00e      	beq.n	8000a60 <_ZN6Keypad17GetCharShortPressEv+0x54>
 8000a42:	7bfa      	ldrb	r2, [r7, #15]
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	440a      	add	r2, r1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3308      	adds	r3, #8
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_ZN6Keypad17GetCharShortPressEv+0x54>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <_ZN6Keypad17GetCharShortPressEv+0x56>
 8000a60:	2300      	movs	r3, #0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d010      	beq.n	8000a88 <_ZN6Keypad17GetCharShortPressEv+0x7c>
			{
				pinPrevPressed[i][j] = true;
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	440a      	add	r2, r1
 8000a70:	4413      	add	r3, r2
 8000a72:	3308      	adds	r3, #8
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
				return keypadMatrix[i][j];
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	491a      	ldr	r1, [pc, #104]	; (8000ae8 <_ZN6Keypad17GetCharShortPressEv+0xdc>)
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	440a      	add	r2, r1
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	e02b      	b.n	8000ae0 <_ZN6Keypad17GetCharShortPressEv+0xd4>
			}
			else if(!Keypad::IsDebounced(j) && pinPrevPressed[i][j])
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff feb5 	bl	80007fc <_ZN6Keypad11IsDebouncedEh>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00b      	beq.n	8000ab6 <_ZN6Keypad17GetCharShortPressEv+0xaa>
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	440a      	add	r2, r1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3308      	adds	r3, #8
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZN6Keypad17GetCharShortPressEv+0xaa>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <_ZN6Keypad17GetCharShortPressEv+0xac>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d008      	beq.n	8000ace <_ZN6Keypad17GetCharShortPressEv+0xc2>
			{
				pinPrevPressed[i][j] = false;
 8000abc:	7bfa      	ldrb	r2, [r7, #15]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3308      	adds	r3, #8
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < NUMBER_OF_ROWS; j++)
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73bb      	strb	r3, [r7, #14]
 8000ad4:	e7aa      	b.n	8000a2c <_ZN6Keypad17GetCharShortPressEv+0x20>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e79c      	b.n	8000a18 <_ZN6Keypad17GetCharShortPressEv+0xc>
			}
		}
	}
	return '\0';
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	080019c0 	.word	0x080019c0

08000aec <_ZN3LCD11WriteNibbleEch>:
 * Write nibbleArray[2] to D6
 * Write nibbleArray[3] to D7
*/

void LCD::WriteNibble(char byte, uint8_t nibbleBitPos)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
 8000af8:	4613      	mov	r3, r2
 8000afa:	70bb      	strb	r3, [r7, #2]
	uint8_t nibbleArray[4] = {0};
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
	uint8_t j = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = nibbleBitPos; i < nibbleBitPos + 4; i++)
 8000b04:	78bb      	ldrb	r3, [r7, #2]
 8000b06:	73bb      	strb	r3, [r7, #14]
 8000b08:	78bb      	ldrb	r3, [r7, #2]
 8000b0a:	1cda      	adds	r2, r3, #3
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	db14      	blt.n	8000b3c <_ZN3LCD11WriteNibbleEch+0x50>
	{
		nibbleArray[j] = (byte & (1<<i)) >> i;
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	411a      	asrs	r2, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	3310      	adds	r3, #16
 8000b28:	443b      	add	r3, r7
 8000b2a:	f803 2c08 	strb.w	r2, [r3, #-8]
		j++;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	3301      	adds	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = nibbleBitPos; i < nibbleBitPos + 4; i++)
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	3301      	adds	r3, #1
 8000b38:	73bb      	strb	r3, [r7, #14]
 8000b3a:	e7e5      	b.n	8000b08 <_ZN3LCD11WriteNibbleEch+0x1c>
	}

	// Send nibble to lcd pins
	for(uint8_t i = 0; i < 4; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	737b      	strb	r3, [r7, #13]
 8000b40:	7b7b      	ldrb	r3, [r7, #13]
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d816      	bhi.n	8000b74 <_ZN3LCD11WriteNibbleEch+0x88>
	{
		HAL_GPIO_WritePin(dataPins[i].port, dataPins[i].selectedPin, (GPIO_PinState)nibbleArray[i]);
 8000b46:	7b7a      	ldrb	r2, [r7, #13]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3202      	adds	r2, #2
 8000b4c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	3302      	adds	r3, #2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	4413      	add	r3, r2
 8000b5a:	8899      	ldrh	r1, [r3, #4]
 8000b5c:	7b7b      	ldrb	r3, [r7, #13]
 8000b5e:	3310      	adds	r3, #16
 8000b60:	443b      	add	r3, r7
 8000b62:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f000 fde6 	bl	8001738 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 4; i++)
 8000b6c:	7b7b      	ldrb	r3, [r7, #13]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	737b      	strb	r3, [r7, #13]
 8000b72:	e7e5      	b.n	8000b40 <_ZN3LCD11WriteNibbleEch+0x54>
	}

	// High to low pulse on EN pin (to transfer nibble)
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_SET);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6898      	ldr	r0, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	899b      	ldrh	r3, [r3, #12]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 fdda 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fb21 	bl	80011cc <HAL_Delay>
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_RESET);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6898      	ldr	r0, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	899b      	ldrh	r3, [r3, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	f000 fdcf 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 fb16 	bl	80011cc <HAL_Delay>
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>:

void LCD::WriteByte(GPIO_PinState lcdMode, char byte)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(rs.port, rs.selectedPin, lcdMode); // Register select
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	889b      	ldrh	r3, [r3, #4]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f000 fdb8 	bl	8001738 <HAL_GPIO_WritePin>
	LCD::WriteNibble(byte, HIGH_NIBBLE);
 8000bc8:	78bb      	ldrb	r3, [r7, #2]
 8000bca:	2204      	movs	r2, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff8c 	bl	8000aec <_ZN3LCD11WriteNibbleEch>
	LCD::WriteNibble(byte, LOW_NIBBLE);
 8000bd4:	78bb      	ldrb	r3, [r7, #2]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff86 	bl	8000aec <_ZN3LCD11WriteNibbleEch>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN3LCD10WriteBytesEPKc>:

void LCD::WriteBytes(const char* pData)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	while(*pData != '\0')
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00a      	beq.n	8000c10 <_ZN3LCD10WriteBytesEPKc+0x28>
	{
		LCD::WriteByte(GPIO_PIN_SET, *pData);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2101      	movs	r1, #1
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffd0 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
		pData++;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
	while(*pData != '\0')
 8000c0e:	e7f0      	b.n	8000bf2 <_ZN3LCD10WriteBytesEPKc+0xa>
	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_>:

	IntegerToString(data, IntegerToStringBuffer);
	LCD::WriteBytes(IntegerToStringBuffer);
}

LCD::LCD(pinStruct_t* RS,
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	; 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
		 pinStruct_t* D5,
		 pinStruct_t* D6,
		 pinStruct_t* D7)
{
	// LCD pin initialization
	GPIO_InitTypeDef lcdPinInitStruct[6] = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2278      	movs	r2, #120	; 0x78
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fdce 	bl	80017d0 <memset>
	pinStruct_t* lcdPinArray[6] = {RS, EN, D4, D5, D6, D7};
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	for(uint8_t i = 0; i < 6; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000c64:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d837      	bhi.n	8000cdc <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0xc4>
	{
		lcdPinInitStruct[i].Pin = lcdPinArray[i]->selectedPin;
 8000c6c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	33b0      	adds	r3, #176	; 0xb0
 8000c74:	443b      	add	r3, r7
 8000c76:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c7a:	889b      	ldrh	r3, [r3, #4]
 8000c7c:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000c80:	4619      	mov	r1, r3
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	33b0      	adds	r3, #176	; 0xb0
 8000c8c:	443b      	add	r3, r7
 8000c8e:	3b9c      	subs	r3, #156	; 0x9c
 8000c90:	6019      	str	r1, [r3, #0]
		lcdPinInitStruct[i].Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	33b0      	adds	r3, #176	; 0xb0
 8000ca0:	443b      	add	r3, r7
 8000ca2:	3b98      	subs	r3, #152	; 0x98
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(lcdPinArray[i]->port, &lcdPinInitStruct[i]);
 8000ca8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	33b0      	adds	r3, #176	; 0xb0
 8000cb0:	443b      	add	r3, r7
 8000cb2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000cbc:	f107 0114 	add.w	r1, r7, #20
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f000 fb88 	bl	80013e0 <HAL_GPIO_Init>
	for(uint8_t i = 0; i < 6; i++)
 8000cd0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000cda:	e7c3      	b.n	8000c64 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x4c>
	}

	// Private variables initialization
	rs = *RS;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce4:	e883 0003 	stmia.w	r3, {r0, r1}
	en = *EN;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3308      	adds	r3, #8
 8000cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf2:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[0] = *D4;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	3310      	adds	r3, #16
 8000cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d00:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[1] = *D5;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d10:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[2] = *D6;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d1a:	3320      	adds	r3, #32
 8000d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d20:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[3] = *D7;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000d2a:	3328      	adds	r3, #40	; 0x28
 8000d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d30:	e883 0003 	stmia.w	r3, {r0, r1}

	// LCD initialization sequence
	HAL_Delay(16); // Power-on delay
 8000d34:	2010      	movs	r0, #16
 8000d36:	f000 fa49 	bl	80011cc <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT); // Function Set mode (8-bit mode)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff ff32 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(5); // wait for more than 4.1 ms
 8000d44:	2005      	movs	r0, #5
 8000d46:	f000 fa41 	bl	80011cc <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT); // Function Set mode (8-bit mode)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff ff2a 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(1); // wait form more than 100 us
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fa39 	bl	80011cc <HAL_Delay>

	// 4-bit operation commands
	uint8_t fourBitCommandSetting[5] =
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x18c>)
 8000d5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d64:	6018      	str	r0, [r3, #0]
 8000d66:	3304      	adds	r3, #4
 8000d68:	7019      	strb	r1, [r3, #0]
		FUNCTION_SET_2LINE_5x8DOT,
		CLEAR_DISPLAY,
		DISPLAY_ON_CURSOR_OFF,
		ENTRY_MODE_INCREMENT_CURSOR
	};
	for(uint8_t i = 0; i < 5; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000d70:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d810      	bhi.n	8000d9a <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x182>
	{
		LCD::WriteByte(GPIO_PIN_RESET, fourBitCommandSetting[i]);
 8000d78:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d7c:	33b0      	adds	r3, #176	; 0xb0
 8000d7e:	443b      	add	r3, r7
 8000d80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d84:	461a      	mov	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff ff0d 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	for(uint8_t i = 0; i < 5; i++)
 8000d8e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d92:	3301      	adds	r3, #1
 8000d94:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000d98:	e7ea      	b.n	8000d70 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x158>
	}
}
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	37b0      	adds	r7, #176	; 0xb0
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	08001948 	.word	0x08001948

08000da8 <_ZN3LCD9SetCursorEhh>:

void LCD::SetCursor(uint8_t row, uint8_t column)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
 8000db4:	4613      	mov	r3, r2
 8000db6:	70bb      	strb	r3, [r7, #2]
	if ((row > 3) || (column > 19))
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d815      	bhi.n	8000dea <_ZN3LCD9SetCursorEhh+0x42>
 8000dbe:	78bb      	ldrb	r3, [r7, #2]
 8000dc0:	2b13      	cmp	r3, #19
 8000dc2:	d812      	bhi.n	8000dea <_ZN3LCD9SetCursorEhh+0x42>
	{
		// Out of range
		return;
	}

	LCD::WriteByte(GPIO_PIN_RESET, ((1<<7) | ddramAddr[row][column]));
 8000dc4:	78fa      	ldrb	r2, [r7, #3]
 8000dc6:	78b9      	ldrb	r1, [r7, #2]
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <_ZN3LCD9SetCursorEhh+0x4c>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4403      	add	r3, r0
 8000dd4:	440b      	add	r3, r1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fee0 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
 8000de8:	e000      	b.n	8000dec <_ZN3LCD9SetCursorEhh+0x44>
		return;
 8000dea:	bf00      	nop
}
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	080019d0 	.word	0x080019d0

08000df8 <_ZN3LCD5PrintEc>:

void LCD::Print(char data)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	LCD::WriteByte(GPIO_PIN_SET, data);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	2101      	movs	r1, #1
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fecc 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZN3LCD5PrintEPKc>:

void LCD::Print(const char* pData)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	LCD::WriteBytes(pData);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fedf 	bl	8000be8 <_ZN3LCD10WriteBytesEPKc>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZN3LCD5ClearEv>:
{
	LCD::WriteInteger(*data);
}

void LCD::Clear(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	LCD::WriteByte(GPIO_PIN_RESET, CLEAR_DISPLAY);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff feb2 	bl	8000ba8 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <main>:
#include "game.h"

int main(void)
{
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b0a4      	sub	sp, #144	; 0x90
 8000e50:	af04      	add	r7, sp, #16
	HAL_Init();
 8000e52:	f000 f941 	bl	80010d8 <HAL_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b71      	ldr	r3, [pc, #452]	; (8001020 <main+0x1d4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a70      	ldr	r2, [pc, #448]	; (8001020 <main+0x1d4>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b6e      	ldr	r3, [pc, #440]	; (8001020 <main+0x1d4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <main+0x1d4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a69      	ldr	r2, [pc, #420]	; (8001020 <main+0x1d4>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <main+0x1d4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <main+0x1d4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a62      	ldr	r2, [pc, #392]	; (8001020 <main+0x1d4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b60      	ldr	r3, [pc, #384]	; (8001020 <main+0x1d4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

	// LCD init
	pinStruct_t rs = {GPIOC, GPIO_PIN_0};
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <main+0x1d8>)
 8000eac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t en = {GPIOC, GPIO_PIN_1};
 8000eb8:	4a5b      	ldr	r2, [pc, #364]	; (8001028 <main+0x1dc>)
 8000eba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec2:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d4 = {GPIOC, GPIO_PIN_2};
 8000ec6:	4a59      	ldr	r2, [pc, #356]	; (800102c <main+0x1e0>)
 8000ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed0:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d5 = {GPIOC, GPIO_PIN_3};
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <main+0x1e4>)
 8000ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ede:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d6 = {GPIOC, GPIO_PIN_4};
 8000ee2:	4a54      	ldr	r2, [pc, #336]	; (8001034 <main+0x1e8>)
 8000ee4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eec:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d7 = {GPIOC, GPIO_PIN_5};
 8000ef0:	4a51      	ldr	r2, [pc, #324]	; (8001038 <main+0x1ec>)
 8000ef2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efa:	e883 0003 	stmia.w	r3, {r0, r1}

	static LCD lcd(&rs, &en, &d4, &d5, &d6, &d7);
 8000efe:	4b4f      	ldr	r3, [pc, #316]	; (800103c <main+0x1f0>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f3bf 8f5b 	dmb	ish
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d020      	beq.n	8000f5c <main+0x110>
 8000f1a:	4848      	ldr	r0, [pc, #288]	; (800103c <main+0x1f0>)
 8000f1c:	f000 fc25 	bl	800176a <__cxa_guard_acquire>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf14      	ite	ne
 8000f26:	2301      	movne	r3, #1
 8000f28:	2300      	moveq	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d015      	beq.n	8000f5c <main+0x110>
 8000f30:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000f34:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f38:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	483b      	ldr	r0, [pc, #236]	; (8001040 <main+0x1f4>)
 8000f52:	f7ff fe61 	bl	8000c18 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_>
 8000f56:	4839      	ldr	r0, [pc, #228]	; (800103c <main+0x1f0>)
 8000f58:	f000 fc13 	bl	8001782 <__cxa_guard_release>

	// Keypad init
	pinStruct_t rowPins[NUMBER_OF_ROWS] =
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <main+0x1f8>)
 8000f5e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f62:	461d      	mov	r5, r3
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{GPIOA, GPIO_PIN_6},
		{GPIOA, GPIO_PIN_7},
		{GPIOB, GPIO_PIN_6}
	};

	pinStruct_t columnPins[NUMBER_OF_COLUMNS] =
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <main+0x1fc>)
 8000f72:	f107 040c 	add.w	r4, r7, #12
 8000f76:	461d      	mov	r5, r3
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{GPIOA, GPIO_PIN_1},
		{GPIOA, GPIO_PIN_4},
 		{GPIOB, GPIO_PIN_0}
	};

	static Keypad keypad(rowPins, columnPins);
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <main+0x200>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f3bf 8f5b 	dmb	ish
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d015      	beq.n	8000fcc <main+0x180>
 8000fa0:	482a      	ldr	r0, [pc, #168]	; (800104c <main+0x200>)
 8000fa2:	f000 fbe2 	bl	800176a <__cxa_guard_acquire>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf14      	ite	ne
 8000fac:	2301      	movne	r3, #1
 8000fae:	2300      	moveq	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00a      	beq.n	8000fcc <main+0x180>
 8000fb6:	f107 020c 	add.w	r2, r7, #12
 8000fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4823      	ldr	r0, [pc, #140]	; (8001050 <main+0x204>)
 8000fc2:	f7ff fc59 	bl	8000878 <_ZN6KeypadC1EP11pinStruct_tS1_>
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <main+0x200>)
 8000fc8:	f000 fbdb 	bl	8001782 <__cxa_guard_release>

	// Game Startup
	Game_DisplayIntro(&lcd);
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <main+0x1f4>)
 8000fce:	f7ff fa7d 	bl	80004cc <_Z17Game_DisplayIntroP3LCD>
	HAL_Delay(1500);
 8000fd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fd6:	f000 f8f9 	bl	80011cc <HAL_Delay>
	Game_DisplayMenu(&lcd);
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <main+0x1f4>)
 8000fdc:	f7ff faae 	bl	800053c <_Z16Game_DisplayMenuP3LCD>

	while(1)
	{
		char pressedKey = keypad.GetCharShortPress();
 8000fe0:	481b      	ldr	r0, [pc, #108]	; (8001050 <main+0x204>)
 8000fe2:	f7ff fd13 	bl	8000a0c <_ZN6Keypad17GetCharShortPressEv>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		switch (pressedKey)
 8000fec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ff0:	2b42      	cmp	r3, #66	; 0x42
 8000ff2:	d00a      	beq.n	800100a <main+0x1be>
 8000ff4:	2b42      	cmp	r3, #66	; 0x42
 8000ff6:	dc10      	bgt.n	800101a <main+0x1ce>
 8000ff8:	2b23      	cmp	r3, #35	; 0x23
 8000ffa:	d00a      	beq.n	8001012 <main+0x1c6>
 8000ffc:	2b41      	cmp	r3, #65	; 0x41
 8000ffe:	d10c      	bne.n	800101a <main+0x1ce>
		{
			case 'A':
				Game_Start(&lcd, &keypad);
 8001000:	4913      	ldr	r1, [pc, #76]	; (8001050 <main+0x204>)
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <main+0x1f4>)
 8001004:	f7ff fb3c 	bl	8000680 <_Z10Game_StartP3LCDP6Keypad>
				break;
 8001008:	e008      	b.n	800101c <main+0x1d0>
			case 'B':
				Game_DisplayMenu(&lcd);
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <main+0x1f4>)
 800100c:	f7ff fa96 	bl	800053c <_Z16Game_DisplayMenuP3LCD>
				break;
 8001010:	e004      	b.n	800101c <main+0x1d0>
			case '#':
				Game_DisplayRules(&lcd);
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <main+0x1f4>)
 8001014:	f7ff faca 	bl	80005ac <_Z17Game_DisplayRulesP3LCD>
				break;
 8001018:	e000      	b.n	800101c <main+0x1d0>
			default:
				break;
 800101a:	bf00      	nop
		}
	}
 800101c:	e7e0      	b.n	8000fe0 <main+0x194>
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	08001950 	.word	0x08001950
 8001028:	08001958 	.word	0x08001958
 800102c:	08001960 	.word	0x08001960
 8001030:	08001968 	.word	0x08001968
 8001034:	08001970 	.word	0x08001970
 8001038:	08001978 	.word	0x08001978
 800103c:	20000068 	.word	0x20000068
 8001040:	20000038 	.word	0x20000038
 8001044:	08001980 	.word	0x08001980
 8001048:	080019a0 	.word	0x080019a0
 800104c:	20000084 	.word	0x20000084
 8001050:	2000006c 	.word	0x2000006c

08001054 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001058:	f000 f898 	bl	800118c <HAL_IncTick>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f000 fb69 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fec9 	bl	8000e4c <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010c8:	08001a28 	.word	0x08001a28
  ldr r2, =_sbss
 80010cc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010d0:	2000008c 	.word	0x2000008c

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_Init+0x40>)
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_Init+0x40>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x40>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f939 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f810 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f000 f806 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f93b 	bl	80013c6 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f911 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000014 	.word	0x20000014
 8001188:	20000010 	.word	0x20000010

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000014 	.word	0x20000014
 80011b0:	20000088 	.word	0x20000088

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000088 	.word	0x20000088

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000014 	.word	0x20000014

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff47 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff5c 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffb0 	bl	8001334 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e165      	b.n	80016c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013fc:	2201      	movs	r2, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8154 	bne.w	80016c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d005      	beq.n	8001432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	2b02      	cmp	r3, #2
 8001430:	d130      	bne.n	8001494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 0201 	and.w	r2, r3, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b03      	cmp	r3, #3
 800149e:	d017      	beq.n	80014d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d123      	bne.n	8001524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80ae 	beq.w	80016c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_GPIO_Init+0x300>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a5c      	ldr	r2, [pc, #368]	; (80016e0 <HAL_GPIO_Init+0x300>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_GPIO_Init+0x300>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <HAL_GPIO_Init+0x308>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d025      	beq.n	80015fa <HAL_GPIO_Init+0x21a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <HAL_GPIO_Init+0x30c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d01f      	beq.n	80015f6 <HAL_GPIO_Init+0x216>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <HAL_GPIO_Init+0x310>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x212>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x314>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4b      	ldr	r2, [pc, #300]	; (80016f8 <HAL_GPIO_Init+0x318>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x20a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_GPIO_Init+0x31c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x206>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a49      	ldr	r2, [pc, #292]	; (8001700 <HAL_GPIO_Init+0x320>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x202>
 80015de:	2306      	movs	r3, #6
 80015e0:	e00c      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00a      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x21c>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x304>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_GPIO_Init+0x324>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_GPIO_Init+0x324>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_GPIO_Init+0x324>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_GPIO_Init+0x324>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_GPIO_Init+0x324>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_GPIO_Init+0x324>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_GPIO_Init+0x324>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_GPIO_Init+0x324>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f ae96 	bls.w	80013fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40021400 	.word	0x40021400
 8001700:	40021800 	.word	0x40021800
 8001704:	40013c00 	.word	0x40013c00

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e001      	b.n	800172a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	619a      	str	r2, [r3, #24]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <__cxa_guard_acquire>:
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	07db      	lsls	r3, r3, #31
 800176e:	d406      	bmi.n	800177e <__cxa_guard_acquire+0x14>
 8001770:	7843      	ldrb	r3, [r0, #1]
 8001772:	b103      	cbz	r3, 8001776 <__cxa_guard_acquire+0xc>
 8001774:	deff      	udf	#255	; 0xff
 8001776:	2301      	movs	r3, #1
 8001778:	7043      	strb	r3, [r0, #1]
 800177a:	4618      	mov	r0, r3
 800177c:	4770      	bx	lr
 800177e:	2000      	movs	r0, #0
 8001780:	4770      	bx	lr

08001782 <__cxa_guard_release>:
 8001782:	2301      	movs	r3, #1
 8001784:	6003      	str	r3, [r0, #0]
 8001786:	4770      	bx	lr

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4d0d      	ldr	r5, [pc, #52]	; (80017c0 <__libc_init_array+0x38>)
 800178c:	4c0d      	ldr	r4, [pc, #52]	; (80017c4 <__libc_init_array+0x3c>)
 800178e:	1b64      	subs	r4, r4, r5
 8001790:	10a4      	asrs	r4, r4, #2
 8001792:	2600      	movs	r6, #0
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	4d0b      	ldr	r5, [pc, #44]	; (80017c8 <__libc_init_array+0x40>)
 800179a:	4c0c      	ldr	r4, [pc, #48]	; (80017cc <__libc_init_array+0x44>)
 800179c:	f000 f820 	bl	80017e0 <_init>
 80017a0:	1b64      	subs	r4, r4, r5
 80017a2:	10a4      	asrs	r4, r4, #2
 80017a4:	2600      	movs	r6, #0
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08001a20 	.word	0x08001a20
 80017c4:	08001a20 	.word	0x08001a20
 80017c8:	08001a20 	.word	0x08001a20
 80017cc:	08001a24 	.word	0x08001a24

080017d0 <memset>:
 80017d0:	4402      	add	r2, r0
 80017d2:	4603      	mov	r3, r0
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d100      	bne.n	80017da <memset+0xa>
 80017d8:	4770      	bx	lr
 80017da:	f803 1b01 	strb.w	r1, [r3], #1
 80017de:	e7f9      	b.n	80017d4 <memset+0x4>

080017e0 <_init>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	bf00      	nop
 80017e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e6:	bc08      	pop	{r3}
 80017e8:	469e      	mov	lr, r3
 80017ea:	4770      	bx	lr

080017ec <_fini>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr
