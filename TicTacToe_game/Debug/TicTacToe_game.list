
TicTacToe_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001600  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080017c4  080017c4  000117c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019e4  080019e4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080019e4  080019e4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019e4  080019e4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019e8  080019e8  000119e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080019ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000018  08001a04  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001a04  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bf5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f2  00000000  00000000  00024c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00026030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00026428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217de  00000000  00000000  000267b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004bd8  00000000  00000000  00047f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2063  00000000  00000000  0004cb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ebc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea8  00000000  00000000  0010ec1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080017ac 	.word	0x080017ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080017ac 	.word	0x080017ac

08000204 <_ZL15UpdateGameBoardPcPA5_c>:
	bool winDetected;
	char winner;
}gameResult_t;

static void UpdateGameBoard(char* pressedKey, char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	bool playerMadeAnInput = false;
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000212:	2300      	movs	r3, #0
 8000214:	73bb      	strb	r3, [r7, #14]
 8000216:	7bbb      	ldrb	r3, [r7, #14]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d840      	bhi.n	800029e <_ZL15UpdateGameBoardPcPA5_c+0x9a>
	{
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 800021c:	2300      	movs	r3, #0
 800021e:	737b      	strb	r3, [r7, #13]
 8000220:	7b7b      	ldrb	r3, [r7, #13]
 8000222:	2b04      	cmp	r3, #4
 8000224:	d833      	bhi.n	800028e <_ZL15UpdateGameBoardPcPA5_c+0x8a>
		{
			if(*pressedKey == gameBoard[rowIndex][colIndex])
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	7819      	ldrb	r1, [r3, #0]
 800022a:	7bba      	ldrb	r2, [r7, #14]
 800022c:	4613      	mov	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	441a      	add	r2, r3
 8000236:	7b7b      	ldrb	r3, [r7, #13]
 8000238:	5cd3      	ldrb	r3, [r2, r3]
 800023a:	4299      	cmp	r1, r3
 800023c:	d123      	bne.n	8000286 <_ZL15UpdateGameBoardPcPA5_c+0x82>
			{
				switch(player)
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <_ZL15UpdateGameBoardPcPA5_c+0xa8>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <_ZL15UpdateGameBoardPcPA5_c+0x48>
 8000246:	2b01      	cmp	r3, #1
 8000248:	d00d      	beq.n	8000266 <_ZL15UpdateGameBoardPcPA5_c+0x62>
					case PLAYER_2:
						gameBoard[rowIndex][colIndex] = 'O';
						player = PLAYER_1;
						break;
					default:
						break;
 800024a:	e019      	b.n	8000280 <_ZL15UpdateGameBoardPcPA5_c+0x7c>
						gameBoard[rowIndex][colIndex] = 'X';
 800024c:	7bba      	ldrb	r2, [r7, #14]
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	441a      	add	r2, r3
 8000258:	7b7b      	ldrb	r3, [r7, #13]
 800025a:	2158      	movs	r1, #88	; 0x58
 800025c:	54d1      	strb	r1, [r2, r3]
						player = PLAYER_2;
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <_ZL15UpdateGameBoardPcPA5_c+0xa8>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
						break;
 8000264:	e00c      	b.n	8000280 <_ZL15UpdateGameBoardPcPA5_c+0x7c>
						gameBoard[rowIndex][colIndex] = 'O';
 8000266:	7bba      	ldrb	r2, [r7, #14]
 8000268:	4613      	mov	r3, r2
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	4413      	add	r3, r2
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	441a      	add	r2, r3
 8000272:	7b7b      	ldrb	r3, [r7, #13]
 8000274:	214f      	movs	r1, #79	; 0x4f
 8000276:	54d1      	strb	r1, [r2, r3]
						player = PLAYER_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <_ZL15UpdateGameBoardPcPA5_c+0xa8>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
						break;
 800027e:	bf00      	nop
				}
				playerMadeAnInput = true;
 8000280:	2301      	movs	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
				break;
 8000284:	e003      	b.n	800028e <_ZL15UpdateGameBoardPcPA5_c+0x8a>
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 8000286:	7b7b      	ldrb	r3, [r7, #13]
 8000288:	3301      	adds	r3, #1
 800028a:	737b      	strb	r3, [r7, #13]
 800028c:	e7c8      	b.n	8000220 <_ZL15UpdateGameBoardPcPA5_c+0x1c>
			}
		}
		if(playerMadeAnInput)
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d103      	bne.n	800029c <_ZL15UpdateGameBoardPcPA5_c+0x98>
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000294:	7bbb      	ldrb	r3, [r7, #14]
 8000296:	3301      	adds	r3, #1
 8000298:	73bb      	strb	r3, [r7, #14]
 800029a:	e7bc      	b.n	8000216 <_ZL15UpdateGameBoardPcPA5_c+0x12>
		{
			break;
 800029c:	bf00      	nop
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000034 	.word	0x20000034

080002b0 <_ZL16DisplayGameBoardP3LCDPA5_c>:

static void DisplayGameBoard(LCD* lcd, char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	uint8_t rowPos = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
	const uint8_t startingColumnPos = 5;
 80002be:	2305      	movs	r3, #5
 80002c0:	733b      	strb	r3, [r7, #12]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	73bb      	strb	r3, [r7, #14]
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d821      	bhi.n	8000310 <_ZL16DisplayGameBoardP3LCDPA5_c+0x60>
	{
		lcd->SetCursor(rowPos, startingColumnPos);
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2205      	movs	r2, #5
 80002d0:	4619      	mov	r1, r3
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 fd4e 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
		rowPos++;
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	3301      	adds	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 80002de:	2300      	movs	r3, #0
 80002e0:	737b      	strb	r3, [r7, #13]
 80002e2:	7b7b      	ldrb	r3, [r7, #13]
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	d80f      	bhi.n	8000308 <_ZL16DisplayGameBoardP3LCDPA5_c+0x58>
		{
			lcd->Print(gameBoard[rowIndex][colIndex]);
 80002e8:	7bba      	ldrb	r2, [r7, #14]
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	683a      	ldr	r2, [r7, #0]
 80002f2:	441a      	add	r2, r3
 80002f4:	7b7b      	ldrb	r3, [r7, #13]
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	4619      	mov	r1, r3
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 fd62 	bl	8000dc4 <_ZN3LCD5PrintEc>
		for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex++)
 8000300:	7b7b      	ldrb	r3, [r7, #13]
 8000302:	3301      	adds	r3, #1
 8000304:	737b      	strb	r3, [r7, #13]
 8000306:	e7ec      	b.n	80002e2 <_ZL16DisplayGameBoardP3LCDPA5_c+0x32>
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	3301      	adds	r3, #1
 800030c:	73bb      	strb	r3, [r7, #14]
 800030e:	e7da      	b.n	80002c6 <_ZL16DisplayGameBoardP3LCDPA5_c+0x16>
		}
	}
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <_ZL21CheckForHorizontalWinPA5_c>:

static gameResult_t CheckForHorizontalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 8000320:	2300      	movs	r3, #0
 8000322:	81bb      	strh	r3, [r7, #12]
	char startOfRow;
	uint8_t numberOfMatchingPlayerInputs = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	75fb      	strb	r3, [r7, #23]

	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000328:	2300      	movs	r3, #0
 800032a:	75bb      	strb	r3, [r7, #22]
 800032c:	7dbb      	ldrb	r3, [r7, #22]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d82e      	bhi.n	8000390 <_ZL21CheckForHorizontalWinPA5_c+0x78>
	{
		startOfRow = gameBoard[rowIndex][0];
 8000332:	7dba      	ldrb	r2, [r7, #22]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	753b      	strb	r3, [r7, #20]
		for(uint8_t colIndex = 2; colIndex < Board::numberOfCols; colIndex+=2)
 8000342:	2302      	movs	r3, #2
 8000344:	757b      	strb	r3, [r7, #21]
 8000346:	7d7b      	ldrb	r3, [r7, #21]
 8000348:	2b04      	cmp	r3, #4
 800034a:	d811      	bhi.n	8000370 <_ZL21CheckForHorizontalWinPA5_c+0x58>
		{
			if(startOfRow == gameBoard[rowIndex][colIndex])
 800034c:	7dba      	ldrb	r2, [r7, #22]
 800034e:	4613      	mov	r3, r2
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4413      	add	r3, r2
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	441a      	add	r2, r3
 8000358:	7d7b      	ldrb	r3, [r7, #21]
 800035a:	5cd3      	ldrb	r3, [r2, r3]
 800035c:	7d3a      	ldrb	r2, [r7, #20]
 800035e:	429a      	cmp	r2, r3
 8000360:	d102      	bne.n	8000368 <_ZL21CheckForHorizontalWinPA5_c+0x50>
			{
				numberOfMatchingPlayerInputs++;
 8000362:	7dfb      	ldrb	r3, [r7, #23]
 8000364:	3301      	adds	r3, #1
 8000366:	75fb      	strb	r3, [r7, #23]
		for(uint8_t colIndex = 2; colIndex < Board::numberOfCols; colIndex+=2)
 8000368:	7d7b      	ldrb	r3, [r7, #21]
 800036a:	3302      	adds	r3, #2
 800036c:	757b      	strb	r3, [r7, #21]
 800036e:	e7ea      	b.n	8000346 <_ZL21CheckForHorizontalWinPA5_c+0x2e>
			}
		}
		if(numberOfMatchingPlayerInputs == 2)
 8000370:	7dfb      	ldrb	r3, [r7, #23]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d106      	bne.n	8000384 <_ZL21CheckForHorizontalWinPA5_c+0x6c>
		{
			result.winDetected = true;
 8000376:	2301      	movs	r3, #1
 8000378:	733b      	strb	r3, [r7, #12]
			result.winner = startOfRow;
 800037a:	7d3b      	ldrb	r3, [r7, #20]
 800037c:	737b      	strb	r3, [r7, #13]
			return result;
 800037e:	89bb      	ldrh	r3, [r7, #12]
 8000380:	823b      	strh	r3, [r7, #16]
 8000382:	e007      	b.n	8000394 <_ZL21CheckForHorizontalWinPA5_c+0x7c>
		}
		else
		{
			numberOfMatchingPlayerInputs = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
	for(uint8_t rowIndex = 0; rowIndex < Board::numberOfRows; rowIndex++)
 8000388:	7dbb      	ldrb	r3, [r7, #22]
 800038a:	3301      	adds	r3, #1
 800038c:	75bb      	strb	r3, [r7, #22]
 800038e:	e7cd      	b.n	800032c <_ZL21CheckForHorizontalWinPA5_c+0x14>
		}
	}
	return result;
 8000390:	89bb      	ldrh	r3, [r7, #12]
 8000392:	823b      	strh	r3, [r7, #16]
}
 8000394:	2300      	movs	r3, #0
 8000396:	7c3a      	ldrb	r2, [r7, #16]
 8000398:	f362 0307 	bfi	r3, r2, #0, #8
 800039c:	7c7a      	ldrb	r2, [r7, #17]
 800039e:	f362 230f 	bfi	r3, r2, #8, #8
 80003a2:	4618      	mov	r0, r3
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <_ZL19CheckForVerticalWinPA5_c>:

static gameResult_t CheckForVerticalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 80003ae:	b480      	push	{r7}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 80003b6:	2300      	movs	r3, #0
 80003b8:	81bb      	strh	r3, [r7, #12]
	char startOfColumn;
	uint8_t numberOfMatchingPlayerInputs = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	75fb      	strb	r3, [r7, #23]

	for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex+=2)
 80003be:	2300      	movs	r3, #0
 80003c0:	75bb      	strb	r3, [r7, #22]
 80003c2:	7dbb      	ldrb	r3, [r7, #22]
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d82a      	bhi.n	800041e <_ZL19CheckForVerticalWinPA5_c+0x70>
	{
		startOfColumn = gameBoard[0][colIndex];
 80003c8:	7dbb      	ldrb	r3, [r7, #22]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	5cd3      	ldrb	r3, [r2, r3]
 80003ce:	753b      	strb	r3, [r7, #20]
		for(uint8_t rowIndex = 1; rowIndex < Board::numberOfRows; rowIndex++)
 80003d0:	2301      	movs	r3, #1
 80003d2:	757b      	strb	r3, [r7, #21]
 80003d4:	7d7b      	ldrb	r3, [r7, #21]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d811      	bhi.n	80003fe <_ZL19CheckForVerticalWinPA5_c+0x50>
		{
			if(startOfColumn == gameBoard[rowIndex][colIndex])
 80003da:	7d7a      	ldrb	r2, [r7, #21]
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	441a      	add	r2, r3
 80003e6:	7dbb      	ldrb	r3, [r7, #22]
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	7d3a      	ldrb	r2, [r7, #20]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d102      	bne.n	80003f6 <_ZL19CheckForVerticalWinPA5_c+0x48>
			{
				numberOfMatchingPlayerInputs++;
 80003f0:	7dfb      	ldrb	r3, [r7, #23]
 80003f2:	3301      	adds	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
		for(uint8_t rowIndex = 1; rowIndex < Board::numberOfRows; rowIndex++)
 80003f6:	7d7b      	ldrb	r3, [r7, #21]
 80003f8:	3301      	adds	r3, #1
 80003fa:	757b      	strb	r3, [r7, #21]
 80003fc:	e7ea      	b.n	80003d4 <_ZL19CheckForVerticalWinPA5_c+0x26>
			}
		}
		if(numberOfMatchingPlayerInputs == 2)
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d106      	bne.n	8000412 <_ZL19CheckForVerticalWinPA5_c+0x64>
		{
			result.winDetected = true;
 8000404:	2301      	movs	r3, #1
 8000406:	733b      	strb	r3, [r7, #12]
			result.winner = startOfColumn;
 8000408:	7d3b      	ldrb	r3, [r7, #20]
 800040a:	737b      	strb	r3, [r7, #13]
			return result;
 800040c:	89bb      	ldrh	r3, [r7, #12]
 800040e:	823b      	strh	r3, [r7, #16]
 8000410:	e007      	b.n	8000422 <_ZL19CheckForVerticalWinPA5_c+0x74>
		}
		else
		{
			numberOfMatchingPlayerInputs = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	75fb      	strb	r3, [r7, #23]
	for(uint8_t colIndex = 0; colIndex < Board::numberOfCols; colIndex+=2)
 8000416:	7dbb      	ldrb	r3, [r7, #22]
 8000418:	3302      	adds	r3, #2
 800041a:	75bb      	strb	r3, [r7, #22]
 800041c:	e7d1      	b.n	80003c2 <_ZL19CheckForVerticalWinPA5_c+0x14>
		}
	}
	return result;
 800041e:	89bb      	ldrh	r3, [r7, #12]
 8000420:	823b      	strh	r3, [r7, #16]
}
 8000422:	2300      	movs	r3, #0
 8000424:	7c3a      	ldrb	r2, [r7, #16]
 8000426:	f362 0307 	bfi	r3, r2, #0, #8
 800042a:	7c7a      	ldrb	r2, [r7, #17]
 800042c:	f362 230f 	bfi	r3, r2, #8, #8
 8000430:	4618      	mov	r0, r3
 8000432:	371c      	adds	r7, #28
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <_ZL19CheckForDiagonalWinPA5_c>:

static gameResult_t CheckForDiagonalWin(char gameBoard[Board::numberOfRows][Board::numberOfCols])
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	gameResult_t result = {0};
 8000444:	2300      	movs	r3, #0
 8000446:	813b      	strh	r3, [r7, #8]
	// Back slash diagonal: '\'
	if((gameBoard[0][0] == gameBoard[1][2]) && (gameBoard[0][0] == gameBoard[2][4]))
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3305      	adds	r3, #5
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	429a      	cmp	r2, r3
 8000454:	d10e      	bne.n	8000474 <_ZL19CheckForDiagonalWinPA5_c+0x38>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	330a      	adds	r3, #10
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d107      	bne.n	8000474 <_ZL19CheckForDiagonalWinPA5_c+0x38>
	{
		result.winDetected = true;
 8000464:	2301      	movs	r3, #1
 8000466:	723b      	strb	r3, [r7, #8]
		result.winner = gameBoard[0][0];
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	727b      	strb	r3, [r7, #9]
		return result;
 800046e:	893b      	ldrh	r3, [r7, #8]
 8000470:	81bb      	strh	r3, [r7, #12]
 8000472:	e017      	b.n	80004a4 <_ZL19CheckForDiagonalWinPA5_c+0x68>
	}
	// Forward slash diagonal: '/'
	if((gameBoard[0][4] == gameBoard[1][2]) && (gameBoard[0][4] == gameBoard[2][0]))
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	791a      	ldrb	r2, [r3, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3305      	adds	r3, #5
 800047c:	789b      	ldrb	r3, [r3, #2]
 800047e:	429a      	cmp	r2, r3
 8000480:	d10e      	bne.n	80004a0 <_ZL19CheckForDiagonalWinPA5_c+0x64>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791a      	ldrb	r2, [r3, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	330a      	adds	r3, #10
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	d107      	bne.n	80004a0 <_ZL19CheckForDiagonalWinPA5_c+0x64>
	{
		result.winDetected = true;
 8000490:	2301      	movs	r3, #1
 8000492:	723b      	strb	r3, [r7, #8]
		result.winner = gameBoard[0][4];
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	727b      	strb	r3, [r7, #9]
		return result;
 800049a:	893b      	ldrh	r3, [r7, #8]
 800049c:	81bb      	strh	r3, [r7, #12]
 800049e:	e001      	b.n	80004a4 <_ZL19CheckForDiagonalWinPA5_c+0x68>
	}
	return result;
 80004a0:	893b      	ldrh	r3, [r7, #8]
 80004a2:	81bb      	strh	r3, [r7, #12]
}
 80004a4:	2300      	movs	r3, #0
 80004a6:	7b3a      	ldrb	r2, [r7, #12]
 80004a8:	f362 0307 	bfi	r3, r2, #0, #8
 80004ac:	7b7a      	ldrb	r2, [r7, #13]
 80004ae:	f362 230f 	bfi	r3, r2, #8, #8
 80004b2:	4618      	mov	r0, r3
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <_Z17Game_DisplayIntroP3LCD>:

//Extern functions

void Game_DisplayIntro(LCD* lcd)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f000 fc98 	bl	8000dfe <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2100      	movs	r1, #0
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 fc4e 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   WELCOME      |");
 80004d8:	4911      	ldr	r1, [pc, #68]	; (8000520 <_Z17Game_DisplayIntroP3LCD+0x60>)
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 fc82 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 fc45 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   TO THE       |");
 80004ea:	490e      	ldr	r1, [pc, #56]	; (8000524 <_Z17Game_DisplayIntroP3LCD+0x64>)
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f000 fc79 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 fc3c 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   TIC TAC TOE  |");
 80004fc:	490a      	ldr	r1, [pc, #40]	; (8000528 <_Z17Game_DisplayIntroP3LCD+0x68>)
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fc70 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2103      	movs	r1, #3
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fc33 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("|   GAME         |");
 800050e:	4907      	ldr	r1, [pc, #28]	; (800052c <_Z17Game_DisplayIntroP3LCD+0x6c>)
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 fc67 	bl	8000de4 <_ZN3LCD5PrintEPKc>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	080017c4 	.word	0x080017c4
 8000524:	080017d8 	.word	0x080017d8
 8000528:	080017ec 	.word	0x080017ec
 800052c:	08001800 	.word	0x08001800

08000530 <_Z16Game_DisplayMenuP3LCD>:

void Game_DisplayMenu(LCD* lcd)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 fc60 	bl	8000dfe <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 3);
 800053e:	2203      	movs	r2, #3
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fc16 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Game menu");
 8000548:	4911      	ldr	r1, [pc, #68]	; (8000590 <_Z16Game_DisplayMenuP3LCD+0x60>)
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 fc4a 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 fc0d 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("1|2|3   A:Start");
 800055a:	490e      	ldr	r1, [pc, #56]	; (8000594 <_Z16Game_DisplayMenuP3LCD+0x64>)
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 fc41 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2102      	movs	r1, #2
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 fc04 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("4|5|6   B:Back/Exit");
 800056c:	490a      	ldr	r1, [pc, #40]	; (8000598 <_Z16Game_DisplayMenuP3LCD+0x68>)
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 fc38 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2103      	movs	r1, #3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 fbfb 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("7|8|9   #:Rules");
 800057e:	4907      	ldr	r1, [pc, #28]	; (800059c <_Z16Game_DisplayMenuP3LCD+0x6c>)
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 fc2f 	bl	8000de4 <_ZN3LCD5PrintEPKc>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	08001814 	.word	0x08001814
 8000594:	08001820 	.word	0x08001820
 8000598:	08001830 	.word	0x08001830
 800059c:	08001844 	.word	0x08001844

080005a0 <_Z17Game_DisplayRulesP3LCD>:

void Game_DisplayRules(LCD* lcd)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	lcd->Clear();
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 fc28 	bl	8000dfe <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 5);
 80005ae:	2205      	movs	r2, #5
 80005b0:	2100      	movs	r1, #0
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 fbde 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Rule(1/2)");
 80005b8:	4926      	ldr	r1, [pc, #152]	; (8000654 <_Z17Game_DisplayRulesP3LCD+0xb4>)
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 fc12 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fbd5 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Press the numbers");
 80005ca:	4923      	ldr	r1, [pc, #140]	; (8000658 <_Z17Game_DisplayRulesP3LCD+0xb8>)
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 fc09 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fbcc 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("to place X or O to");
 80005dc:	491f      	ldr	r1, [pc, #124]	; (800065c <_Z17Game_DisplayRulesP3LCD+0xbc>)
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 fc00 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2103      	movs	r1, #3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fbc3 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("the game board");
 80005ee:	491c      	ldr	r1, [pc, #112]	; (8000660 <_Z17Game_DisplayRulesP3LCD+0xc0>)
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fbf7 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	HAL_Delay(1500);
 80005f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fa:	f000 fdcd 	bl	8001198 <HAL_Delay>
	lcd->Clear();
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fbfd 	bl	8000dfe <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 5);
 8000604:	2205      	movs	r2, #5
 8000606:	2100      	movs	r1, #0
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fbb3 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Rule(2/2)");
 800060e:	4915      	ldr	r1, [pc, #84]	; (8000664 <_Z17Game_DisplayRulesP3LCD+0xc4>)
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 fbe7 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(1, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fbaa 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("X is to player 1");
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <_Z17Game_DisplayRulesP3LCD+0xc8>)
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fbde 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(2, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2102      	movs	r1, #2
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 fba1 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("O is to player 2");
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <_Z17Game_DisplayRulesP3LCD+0xcc>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fbd5 	bl	8000de4 <_ZN3LCD5PrintEPKc>
	lcd->SetCursor(3, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2103      	movs	r1, #3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fb98 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("Players take turns");
 8000644:	490a      	ldr	r1, [pc, #40]	; (8000670 <_Z17Game_DisplayRulesP3LCD+0xd0>)
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 fbcc 	bl	8000de4 <_ZN3LCD5PrintEPKc>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08001854 	.word	0x08001854
 8000658:	08001860 	.word	0x08001860
 800065c:	08001874 	.word	0x08001874
 8000660:	08001888 	.word	0x08001888
 8000664:	08001898 	.word	0x08001898
 8000668:	080018a4 	.word	0x080018a4
 800066c:	080018b8 	.word	0x080018b8
 8000670:	080018cc 	.word	0x080018cc

08000674 <_Z10Game_StartP3LCDP6Keypad>:

void Game_Start(LCD* lcd, Keypad* keypad)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	lcd->Clear();
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 fbbd 	bl	8000dfe <_ZN3LCD5ClearEv>
	lcd->SetCursor(0, 3);
 8000684:	2203      	movs	r2, #3
 8000686:	2100      	movs	r1, #0
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fb73 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
	lcd->Print("TIC TAC TOE");
 800068e:	492c      	ldr	r1, [pc, #176]	; (8000740 <_Z10Game_StartP3LCDP6Keypad+0xcc>)
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fba7 	bl	8000de4 <_ZN3LCD5PrintEPKc>

	char gameBoard[Board::numberOfRows][Board::numberOfCols] =
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <_Z10Game_StartP3LCDP6Keypad+0xd0>)
 8000698:	f107 0410 	add.w	r4, r7, #16
 800069c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069e:	c407      	stmia	r4!, {r0, r1, r2}
 80006a0:	8023      	strh	r3, [r4, #0]
 80006a2:	3402      	adds	r4, #2
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	7023      	strb	r3, [r4, #0]
	};

	//Game loop
	while(1)
	{
		DisplayGameBoard(lcd, gameBoard);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fdfe 	bl	80002b0 <_ZL16DisplayGameBoardP3LCDPA5_c>
		char pressedKey = keypad->GetCharShortPress();
 80006b4:	6838      	ldr	r0, [r7, #0]
 80006b6:	f000 f98f 	bl	80009d8 <_ZN6Keypad17GetCharShortPressEv>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73fb      	strb	r3, [r7, #15]

		if(pressedKey == 'B')
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b42      	cmp	r3, #66	; 0x42
 80006c2:	d106      	bne.n	80006d2 <_Z10Game_StartP3LCDP6Keypad+0x5e>
		{ //Exit game
			Game_DisplayMenu(lcd);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff33 	bl	8000530 <_Z16Game_DisplayMenuP3LCD>
			player = PLAYER_1; //Return first player status to player 1
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <_Z10Game_StartP3LCDP6Keypad+0xd4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
					break;
				}
			}
		}
	}
}
 80006d0:	e033      	b.n	800073a <_Z10Game_StartP3LCDP6Keypad+0xc6>
		UpdateGameBoard(&pressedKey, gameBoard);
 80006d2:	f107 0210 	add.w	r2, r7, #16
 80006d6:	f107 030f 	add.w	r3, r7, #15
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd91 	bl	8000204 <_ZL15UpdateGameBoardPcPA5_c>
		for(uint8_t i= 0; i < 3; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	77fb      	strb	r3, [r7, #31]
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d8dd      	bhi.n	80006a8 <_Z10Game_StartP3LCDP6Keypad+0x34>
			gameResult_t result = CheckWin[i](gameBoard);
 80006ec:	7ffb      	ldrb	r3, [r7, #31]
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <_Z10Game_StartP3LCDP6Keypad+0xd8>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	f107 0210 	add.w	r2, r7, #16
 80006f8:	4610      	mov	r0, r2
 80006fa:	4798      	blx	r3
 80006fc:	4603      	mov	r3, r0
 80006fe:	81bb      	strh	r3, [r7, #12]
			if(result.winDetected)
 8000700:	7b3b      	ldrb	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d014      	beq.n	8000730 <_Z10Game_StartP3LCDP6Keypad+0xbc>
				lcd->SetCursor(1, 13);
 8000706:	220d      	movs	r2, #13
 8000708:	2101      	movs	r1, #1
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 fb32 	bl	8000d74 <_ZN3LCD9SetCursorEhh>
				if(result.winner == 'X')
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	2b58      	cmp	r3, #88	; 0x58
 8000714:	d104      	bne.n	8000720 <_Z10Game_StartP3LCDP6Keypad+0xac>
					lcd->Print("P1 wins");
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <_Z10Game_StartP3LCDP6Keypad+0xdc>)
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 fb63 	bl	8000de4 <_ZN3LCD5PrintEPKc>
					break;
 800071e:	e00b      	b.n	8000738 <_Z10Game_StartP3LCDP6Keypad+0xc4>
				else if(result.winner == 'O')
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	2b4f      	cmp	r3, #79	; 0x4f
 8000724:	d104      	bne.n	8000730 <_Z10Game_StartP3LCDP6Keypad+0xbc>
					lcd->Print("P2 wins");
 8000726:	490b      	ldr	r1, [pc, #44]	; (8000754 <_Z10Game_StartP3LCDP6Keypad+0xe0>)
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fb5b 	bl	8000de4 <_ZN3LCD5PrintEPKc>
					break;
 800072e:	e003      	b.n	8000738 <_Z10Game_StartP3LCDP6Keypad+0xc4>
		for(uint8_t i= 0; i < 3; i++)
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	3301      	adds	r3, #1
 8000734:	77fb      	strb	r3, [r7, #31]
 8000736:	e7d6      	b.n	80006e6 <_Z10Game_StartP3LCDP6Keypad+0x72>
	}
 8000738:	e7b6      	b.n	80006a8 <_Z10Game_StartP3LCDP6Keypad+0x34>
}
 800073a:	3724      	adds	r7, #36	; 0x24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	080018e0 	.word	0x080018e0
 8000744:	080018fc 	.word	0x080018fc
 8000748:	20000034 	.word	0x20000034
 800074c:	20000000 	.word	0x20000000
 8000750:	080018ec 	.word	0x080018ec
 8000754:	080018f4 	.word	0x080018f4

08000758 <_ZN6Keypad9SelectRowEh>:
	{'7' ,'8', '9', 'C'},
	{'*', '0', '#', 'D'}
};

void Keypad::SelectRow(uint8_t pinIndex)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d828      	bhi.n	80007c0 <_ZN6Keypad9SelectRowEh+0x68>
	{
		if(i == pinIndex)
 800076e:	7bfa      	ldrb	r2, [r7, #15]
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	429a      	cmp	r2, r3
 8000774:	d110      	bne.n	8000798 <_ZN6Keypad9SelectRowEh+0x40>
		{
			HAL_GPIO_WritePin(pRow[i].port, pRow[i].selectedPin, GPIO_PIN_RESET);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	4413      	add	r3, r2
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	889b      	ldrh	r3, [r3, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	f000 ffb7 	bl	8001704 <HAL_GPIO_WritePin>
 8000796:	e00f      	b.n	80007b8 <_ZN6Keypad9SelectRowEh+0x60>
		}
		else
		{
			HAL_GPIO_WritePin(pRow[i].port, pRow[i].selectedPin, GPIO_PIN_SET);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4413      	add	r3, r2
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4413      	add	r3, r2
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 ffa6 	bl	8001704 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	e7d3      	b.n	8000768 <_ZN6Keypad9SelectRowEh+0x10>
		}
	}
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN6Keypad11IsDebouncedEh>:

bool Keypad::IsDebounced(uint8_t pinIndex)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	if(HAL_GPIO_ReadPin(pCol[pinIndex].port, pCol[pinIndex].selectedPin) == GPIO_PIN_RESET)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	4413      	add	r3, r2
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	4413      	add	r3, r2
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f000 ff71 	bl	80016d4 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d01b      	beq.n	800083a <_ZN6Keypad11IsDebouncedEh+0x72>
	{
		HAL_Delay(15);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 fcc8 	bl	8001198 <HAL_Delay>
		if(HAL_GPIO_ReadPin(pCol[pinIndex].port, pCol[pinIndex].selectedPin) == GPIO_PIN_RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	f000 ff57 	bl	80016d4 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	bf0c      	ite	eq
 800082c:	2301      	moveq	r3, #1
 800082e:	2300      	movne	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <_ZN6Keypad11IsDebouncedEh+0x72>
		{
			return true;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <_ZN6Keypad11IsDebouncedEh+0x74>
		}
	}
	return false;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <_ZN6KeypadC1EP11pinStruct_tS1_>:

Keypad::Keypad(pinStruct_t* pRowPins, pinStruct_t* pColumsPins)
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ae      	sub	sp, #184	; 0xb8
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
{
	GPIO_InitTypeDef rowPinInitStruct[NUMBER_OF_ROWS] = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2250      	movs	r2, #80	; 0x50
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f000 ff9f 	bl	800179c <memset>
	GPIO_InitTypeDef columnPinInitStruct[NUMBER_OF_COLUMNS] = {0};
 800085e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000862:	2250      	movs	r2, #80	; 0x50
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ff98 	bl	800179c <memset>
	pRow = pRowPins;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	601a      	str	r2, [r3, #0]
	pCol = pColumsPins;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000878:	2300      	movs	r3, #0
 800087a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800087e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000882:	2b03      	cmp	r3, #3
 8000884:	d81d      	bhi.n	80008c2 <_ZN6KeypadC1EP11pinStruct_tS1_+0x7e>
	{
		for(uint8_t j = 0; j < NUMBER_OF_COLUMNS; j++)
 8000886:	2300      	movs	r3, #0
 8000888:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800088c:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8000890:	2b03      	cmp	r3, #3
 8000892:	d810      	bhi.n	80008b6 <_ZN6KeypadC1EP11pinStruct_tS1_+0x72>
		{
			pinPrevPressed[i][j] = false;
 8000894:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8000898:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800089c:	68f9      	ldr	r1, [r7, #12]
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	440a      	add	r2, r1
 80008a2:	4413      	add	r3, r2
 80008a4:	3308      	adds	r3, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < NUMBER_OF_COLUMNS; j++)
 80008aa:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80008ae:	3301      	adds	r3, #1
 80008b0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80008b4:	e7ea      	b.n	800088c <_ZN6KeypadC1EP11pinStruct_tS1_+0x48>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80008b6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80008ba:	3301      	adds	r3, #1
 80008bc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80008c0:	e7dd      	b.n	800087e <_ZN6KeypadC1EP11pinStruct_tS1_+0x3a>
		}
	}

	// Initialize rows
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80008c8:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d835      	bhi.n	800093c <_ZN6KeypadC1EP11pinStruct_tS1_+0xf8>
	{
		rowPinInitStruct[i].Pin = pRow[i].selectedPin;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	4413      	add	r3, r2
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80008e2:	4619      	mov	r1, r3
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	33b8      	adds	r3, #184	; 0xb8
 80008ee:	443b      	add	r3, r7
 80008f0:	3ba4      	subs	r3, #164	; 0xa4
 80008f2:	6019      	str	r1, [r3, #0]
		rowPinInitStruct[i].Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80008f8:	4613      	mov	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	33b8      	adds	r3, #184	; 0xb8
 8000902:	443b      	add	r3, r7
 8000904:	3ba0      	subs	r3, #160	; 0xa0
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(pRow[i].port, &rowPinInitStruct[i]);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 800091c:	f107 0114 	add.w	r1, r7, #20
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	4619      	mov	r1, r3
 800092c:	f000 fd3e 	bl	80013ac <HAL_GPIO_Init>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000930:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8000934:	3301      	adds	r3, #1
 8000936:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800093a:	e7c5      	b.n	80008c8 <_ZN6KeypadC1EP11pinStruct_tS1_+0x84>
	}

	// Initialize columns
	for(uint8_t i = 0; i < NUMBER_OF_COLUMNS; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8000942:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8000946:	2b03      	cmp	r3, #3
 8000948:	d840      	bhi.n	80009cc <_ZN6KeypadC1EP11pinStruct_tS1_+0x188>
	{
		columnPinInitStruct[i].Pin = pCol[i].selectedPin;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	4413      	add	r3, r2
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 800095c:	4619      	mov	r1, r3
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	33b8      	adds	r3, #184	; 0xb8
 8000968:	443b      	add	r3, r7
 800096a:	3b54      	subs	r3, #84	; 0x54
 800096c:	6019      	str	r1, [r3, #0]
		columnPinInitStruct[i].Mode = GPIO_MODE_INPUT;
 800096e:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	33b8      	adds	r3, #184	; 0xb8
 800097c:	443b      	add	r3, r7
 800097e:	3b50      	subs	r3, #80	; 0x50
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
		columnPinInitStruct[i].Pull = GPIO_PULLUP;
 8000984:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	33b8      	adds	r3, #184	; 0xb8
 8000992:	443b      	add	r3, r7
 8000994:	3b4c      	subs	r3, #76	; 0x4c
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(pCol[i].port, &columnPinInitStruct[i]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	4413      	add	r3, r2
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	f897 20b4 	ldrb.w	r2, [r7, #180]	; 0xb4
 80009ac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	440b      	add	r3, r1
 80009ba:	4619      	mov	r1, r3
 80009bc:	f000 fcf6 	bl	80013ac <HAL_GPIO_Init>
	for(uint8_t i = 0; i < NUMBER_OF_COLUMNS; i++)
 80009c0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80009c4:	3301      	adds	r3, #1
 80009c6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80009ca:	e7ba      	b.n	8000942 <_ZN6KeypadC1EP11pinStruct_tS1_+0xfe>
	}
}
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4618      	mov	r0, r3
 80009d0:	37b8      	adds	r7, #184	; 0xb8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <_ZN6Keypad17GetCharShortPressEv>:

char Keypad::GetCharShortPress(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d85f      	bhi.n	8000aaa <_ZN6Keypad17GetCharShortPressEv+0xd2>
	{
		Keypad::SelectRow(i);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	4619      	mov	r1, r3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff feb2 	bl	8000758 <_ZN6Keypad9SelectRowEh>
		for(uint8_t j = 0; j < NUMBER_OF_ROWS; j++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	73bb      	strb	r3, [r7, #14]
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d851      	bhi.n	8000aa2 <_ZN6Keypad17GetCharShortPressEv+0xca>
		{
			if(Keypad::IsDebounced(j) && !pinPrevPressed[i][j])
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	4619      	mov	r1, r3
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fee0 	bl	80007c8 <_ZN6Keypad11IsDebouncedEh>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00e      	beq.n	8000a2c <_ZN6Keypad17GetCharShortPressEv+0x54>
 8000a0e:	7bfa      	ldrb	r2, [r7, #15]
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	440a      	add	r2, r1
 8000a18:	4413      	add	r3, r2
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <_ZN6Keypad17GetCharShortPressEv+0x54>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <_ZN6Keypad17GetCharShortPressEv+0x56>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d010      	beq.n	8000a54 <_ZN6Keypad17GetCharShortPressEv+0x7c>
			{
				pinPrevPressed[i][j] = true;
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	440a      	add	r2, r1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3308      	adds	r3, #8
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
				return keypadMatrix[i][j];
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	491a      	ldr	r1, [pc, #104]	; (8000ab4 <_ZN6Keypad17GetCharShortPressEv+0xdc>)
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	440a      	add	r2, r1
 8000a4e:	4413      	add	r3, r2
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	e02b      	b.n	8000aac <_ZN6Keypad17GetCharShortPressEv+0xd4>
			}
			else if(!Keypad::IsDebounced(j) && pinPrevPressed[i][j])
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff feb5 	bl	80007c8 <_ZN6Keypad11IsDebouncedEh>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f083 0301 	eor.w	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00b      	beq.n	8000a82 <_ZN6Keypad17GetCharShortPressEv+0xaa>
 8000a6a:	7bfa      	ldrb	r2, [r7, #15]
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	440a      	add	r2, r1
 8000a74:	4413      	add	r3, r2
 8000a76:	3308      	adds	r3, #8
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_ZN6Keypad17GetCharShortPressEv+0xaa>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <_ZN6Keypad17GetCharShortPressEv+0xac>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <_ZN6Keypad17GetCharShortPressEv+0xc2>
			{
				pinPrevPressed[i][j] = false;
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	440a      	add	r2, r1
 8000a92:	4413      	add	r3, r2
 8000a94:	3308      	adds	r3, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < NUMBER_OF_ROWS; j++)
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	73bb      	strb	r3, [r7, #14]
 8000aa0:	e7aa      	b.n	80009f8 <_ZN6Keypad17GetCharShortPressEv+0x20>
	for(uint8_t i = 0; i < NUMBER_OF_ROWS; i++)
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e79c      	b.n	80009e4 <_ZN6Keypad17GetCharShortPressEv+0xc>
			}
		}
	}
	return '\0';
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	08001984 	.word	0x08001984

08000ab8 <_ZN3LCD11WriteNibbleEch>:
 * Write nibbleArray[2] to D6
 * Write nibbleArray[3] to D7
*/

void LCD::WriteNibble(char byte, uint8_t nibbleBitPos)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	70bb      	strb	r3, [r7, #2]
	uint8_t nibbleArray[4] = {0};
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
	uint8_t j = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = nibbleBitPos; i < nibbleBitPos + 4; i++)
 8000ad0:	78bb      	ldrb	r3, [r7, #2]
 8000ad2:	73bb      	strb	r3, [r7, #14]
 8000ad4:	78bb      	ldrb	r3, [r7, #2]
 8000ad6:	1cda      	adds	r2, r3, #3
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	db14      	blt.n	8000b08 <_ZN3LCD11WriteNibbleEch+0x50>
	{
		nibbleArray[j] = (byte & (1<<i)) >> i;
 8000ade:	78fa      	ldrb	r2, [r7, #3]
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	401a      	ands	r2, r3
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	411a      	asrs	r2, r3
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	3310      	adds	r3, #16
 8000af4:	443b      	add	r3, r7
 8000af6:	f803 2c08 	strb.w	r2, [r3, #-8]
		j++;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	3301      	adds	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = nibbleBitPos; i < nibbleBitPos + 4; i++)
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	3301      	adds	r3, #1
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	e7e5      	b.n	8000ad4 <_ZN3LCD11WriteNibbleEch+0x1c>
	}

	// Send nibble to lcd pins
	for(uint8_t i = 0; i < 4; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	737b      	strb	r3, [r7, #13]
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d816      	bhi.n	8000b40 <_ZN3LCD11WriteNibbleEch+0x88>
	{
		HAL_GPIO_WritePin(dataPins[i].port, dataPins[i].selectedPin, (GPIO_PinState)nibbleArray[i]);
 8000b12:	7b7a      	ldrb	r2, [r7, #13]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3202      	adds	r2, #2
 8000b18:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	3302      	adds	r3, #2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	8899      	ldrh	r1, [r3, #4]
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	3310      	adds	r3, #16
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f000 fde6 	bl	8001704 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 4; i++)
 8000b38:	7b7b      	ldrb	r3, [r7, #13]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	737b      	strb	r3, [r7, #13]
 8000b3e:	e7e5      	b.n	8000b0c <_ZN3LCD11WriteNibbleEch+0x54>
	}

	// High to low pulse on EN pin (to transfer nibble)
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_SET);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6898      	ldr	r0, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	899b      	ldrh	r3, [r3, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f000 fdda 	bl	8001704 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f000 fb21 	bl	8001198 <HAL_Delay>
	HAL_GPIO_WritePin(en.port, en.selectedPin, GPIO_PIN_RESET);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6898      	ldr	r0, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	899b      	ldrh	r3, [r3, #12]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	f000 fdcf 	bl	8001704 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 fb16 	bl	8001198 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>:

void LCD::WriteByte(GPIO_PinState lcdMode, char byte)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
 8000b80:	4613      	mov	r3, r2
 8000b82:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(rs.port, rs.selectedPin, lcdMode); // Register select
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	889b      	ldrh	r3, [r3, #4]
 8000b8c:	78fa      	ldrb	r2, [r7, #3]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f000 fdb8 	bl	8001704 <HAL_GPIO_WritePin>
	LCD::WriteNibble(byte, HIGH_NIBBLE);
 8000b94:	78bb      	ldrb	r3, [r7, #2]
 8000b96:	2204      	movs	r2, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff8c 	bl	8000ab8 <_ZN3LCD11WriteNibbleEch>
	LCD::WriteNibble(byte, LOW_NIBBLE);
 8000ba0:	78bb      	ldrb	r3, [r7, #2]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff86 	bl	8000ab8 <_ZN3LCD11WriteNibbleEch>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_ZN3LCD10WriteBytesEPKc>:

void LCD::WriteBytes(const char* pData)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	while(*pData != '\0')
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <_ZN3LCD10WriteBytesEPKc+0x28>
	{
		LCD::WriteByte(GPIO_PIN_SET, *pData);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2101      	movs	r1, #1
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffd0 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
		pData++;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
	while(*pData != '\0')
 8000bda:	e7f0      	b.n	8000bbe <_ZN3LCD10WriteBytesEPKc+0xa>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_>:

	IntegerToString(data, IntegerToStringBuffer);
	LCD::WriteBytes(IntegerToStringBuffer);
}

LCD::LCD(pinStruct_t* RS,
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ac      	sub	sp, #176	; 0xb0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
		 pinStruct_t* D5,
		 pinStruct_t* D6,
		 pinStruct_t* D7)
{
	// LCD pin initialization
	GPIO_InitTypeDef lcdPinInitStruct[6] = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2278      	movs	r2, #120	; 0x78
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fdce 	bl	800179c <memset>
	pinStruct_t* lcdPinArray[6] = {RS, EN, D4, D5, D6, D7};
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	for(uint8_t i = 0; i < 6; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000c30:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d837      	bhi.n	8000ca8 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0xc4>
	{
		lcdPinInitStruct[i].Pin = lcdPinArray[i]->selectedPin;
 8000c38:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	33b0      	adds	r3, #176	; 0xb0
 8000c40:	443b      	add	r3, r7
 8000c42:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	33b0      	adds	r3, #176	; 0xb0
 8000c58:	443b      	add	r3, r7
 8000c5a:	3b9c      	subs	r3, #156	; 0x9c
 8000c5c:	6019      	str	r1, [r3, #0]
		lcdPinInitStruct[i].Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	33b0      	adds	r3, #176	; 0xb0
 8000c6c:	443b      	add	r3, r7
 8000c6e:	3b98      	subs	r3, #152	; 0x98
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(lcdPinArray[i]->port, &lcdPinInitStruct[i]);
 8000c74:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	33b0      	adds	r3, #176	; 0xb0
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8000c88:	f107 0114 	add.w	r1, r7, #20
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f000 fb88 	bl	80013ac <HAL_GPIO_Init>
	for(uint8_t i = 0; i < 6; i++)
 8000c9c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000ca6:	e7c3      	b.n	8000c30 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x4c>
	}

	// Private variables initialization
	rs = *RS;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb0:	e883 0003 	stmia.w	r3, {r0, r1}
	en = *EN;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	3308      	adds	r3, #8
 8000cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cbe:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[0] = *D4;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	3310      	adds	r3, #16
 8000cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ccc:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[1] = *D5;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cdc:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[2] = *D6;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ce6:	3320      	adds	r3, #32
 8000ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cec:	e883 0003 	stmia.w	r3, {r0, r1}
	dataPins[3] = *D7;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000cf6:	3328      	adds	r3, #40	; 0x28
 8000cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cfc:	e883 0003 	stmia.w	r3, {r0, r1}

	// LCD initialization sequence
	HAL_Delay(16); // Power-on delay
 8000d00:	2010      	movs	r0, #16
 8000d02:	f000 fa49 	bl	8001198 <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT); // Function Set mode (8-bit mode)
 8000d06:	2203      	movs	r2, #3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff ff32 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(5); // wait for more than 4.1 ms
 8000d10:	2005      	movs	r0, #5
 8000d12:	f000 fa41 	bl	8001198 <HAL_Delay>
	LCD::WriteByte(GPIO_PIN_RESET, FUNCTION_SET_8BIT); // Function Set mode (8-bit mode)
 8000d16:	2203      	movs	r2, #3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff ff2a 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	HAL_Delay(1); // wait form more than 100 us
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fa39 	bl	8001198 <HAL_Delay>

	// 4-bit operation commands
	uint8_t fourBitCommandSetting[5] =
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x18c>)
 8000d28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d30:	6018      	str	r0, [r3, #0]
 8000d32:	3304      	adds	r3, #4
 8000d34:	7019      	strb	r1, [r3, #0]
		FUNCTION_SET_2LINE_5x8DOT,
		CLEAR_DISPLAY,
		DISPLAY_ON_CURSOR_OFF,
		ENTRY_MODE_INCREMENT_CURSOR
	};
	for(uint8_t i = 0; i < 5; i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000d3c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d810      	bhi.n	8000d66 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x182>
	{
		LCD::WriteByte(GPIO_PIN_RESET, fourBitCommandSetting[i]);
 8000d44:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d48:	33b0      	adds	r3, #176	; 0xb0
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d50:	461a      	mov	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f7ff ff0d 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
	for(uint8_t i = 0; i < 5; i++)
 8000d5a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000d64:	e7ea      	b.n	8000d3c <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_+0x158>
	}
}
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	37b0      	adds	r7, #176	; 0xb0
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	0800190c 	.word	0x0800190c

08000d74 <_ZN3LCD9SetCursorEhh>:

void LCD::SetCursor(uint8_t row, uint8_t column)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
 8000d80:	4613      	mov	r3, r2
 8000d82:	70bb      	strb	r3, [r7, #2]
	if ((row > 3) || (column > 19))
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d815      	bhi.n	8000db6 <_ZN3LCD9SetCursorEhh+0x42>
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	2b13      	cmp	r3, #19
 8000d8e:	d812      	bhi.n	8000db6 <_ZN3LCD9SetCursorEhh+0x42>
	{
		// Out of range
		return;
	}

	LCD::WriteByte(GPIO_PIN_RESET, ((1<<7) | ddramAddr[row][column]));
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	78b9      	ldrb	r1, [r7, #2]
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <_ZN3LCD9SetCursorEhh+0x4c>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4403      	add	r3, r0
 8000da0:	440b      	add	r3, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fee0 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
 8000db4:	e000      	b.n	8000db8 <_ZN3LCD9SetCursorEhh+0x44>
		return;
 8000db6:	bf00      	nop
}
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08001994 	.word	0x08001994

08000dc4 <_ZN3LCD5PrintEc>:

void LCD::Print(char data)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	LCD::WriteByte(GPIO_PIN_SET, data);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fecc 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN3LCD5PrintEPKc>:

void LCD::Print(const char* pData)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	LCD::WriteBytes(pData);
 8000dee:	6839      	ldr	r1, [r7, #0]
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fedf 	bl	8000bb4 <_ZN3LCD10WriteBytesEPKc>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_ZN3LCD5ClearEv>:
{
	LCD::WriteInteger(*data);
}

void LCD::Clear(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	LCD::WriteByte(GPIO_PIN_RESET, CLEAR_DISPLAY);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff feb2 	bl	8000b74 <_ZN3LCD9WriteByteE13GPIO_PinStatec>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <main>:
#include "game.h"

int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b0a4      	sub	sp, #144	; 0x90
 8000e1c:	af04      	add	r7, sp, #16
	HAL_Init();
 8000e1e:	f000 f941 	bl	80010a4 <HAL_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b71      	ldr	r3, [pc, #452]	; (8000fec <main+0x1d4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a70      	ldr	r2, [pc, #448]	; (8000fec <main+0x1d4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b6e      	ldr	r3, [pc, #440]	; (8000fec <main+0x1d4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b6a      	ldr	r3, [pc, #424]	; (8000fec <main+0x1d4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a69      	ldr	r2, [pc, #420]	; (8000fec <main+0x1d4>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b67      	ldr	r3, [pc, #412]	; (8000fec <main+0x1d4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b63      	ldr	r3, [pc, #396]	; (8000fec <main+0x1d4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a62      	ldr	r2, [pc, #392]	; (8000fec <main+0x1d4>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b60      	ldr	r3, [pc, #384]	; (8000fec <main+0x1d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

	// LCD init
	pinStruct_t rs = {GPIOC, GPIO_PIN_0};
 8000e76:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <main+0x1d8>)
 8000e78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t en = {GPIOC, GPIO_PIN_1};
 8000e84:	4a5b      	ldr	r2, [pc, #364]	; (8000ff4 <main+0x1dc>)
 8000e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8e:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d4 = {GPIOC, GPIO_PIN_2};
 8000e92:	4a59      	ldr	r2, [pc, #356]	; (8000ff8 <main+0x1e0>)
 8000e94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e9c:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d5 = {GPIOC, GPIO_PIN_3};
 8000ea0:	4a56      	ldr	r2, [pc, #344]	; (8000ffc <main+0x1e4>)
 8000ea2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eaa:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d6 = {GPIOC, GPIO_PIN_4};
 8000eae:	4a54      	ldr	r2, [pc, #336]	; (8001000 <main+0x1e8>)
 8000eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb8:	e883 0003 	stmia.w	r3, {r0, r1}
	pinStruct_t d7 = {GPIOC, GPIO_PIN_5};
 8000ebc:	4a51      	ldr	r2, [pc, #324]	; (8001004 <main+0x1ec>)
 8000ebe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec6:	e883 0003 	stmia.w	r3, {r0, r1}

	static LCD lcd(&rs, &en, &d4, &d5, &d6, &d7);
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <main+0x1f0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f3bf 8f5b 	dmb	ish
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d020      	beq.n	8000f28 <main+0x110>
 8000ee6:	4848      	ldr	r0, [pc, #288]	; (8001008 <main+0x1f0>)
 8000ee8:	f000 fc25 	bl	8001736 <__cxa_guard_acquire>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d015      	beq.n	8000f28 <main+0x110>
 8000efc:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000f00:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f04:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	483b      	ldr	r0, [pc, #236]	; (800100c <main+0x1f4>)
 8000f1e:	f7ff fe61 	bl	8000be4 <_ZN3LCDC1EP11pinStruct_tS1_S1_S1_S1_S1_>
 8000f22:	4839      	ldr	r0, [pc, #228]	; (8001008 <main+0x1f0>)
 8000f24:	f000 fc13 	bl	800174e <__cxa_guard_release>

	// Keypad init
	pinStruct_t rowPins[NUMBER_OF_ROWS] =
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <main+0x1f8>)
 8000f2a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f2e:	461d      	mov	r5, r3
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{GPIOA, GPIO_PIN_6},
		{GPIOA, GPIO_PIN_7},
		{GPIOB, GPIO_PIN_6}
	};

	pinStruct_t columnPins[NUMBER_OF_COLUMNS] =
 8000f3c:	4b35      	ldr	r3, [pc, #212]	; (8001014 <main+0x1fc>)
 8000f3e:	f107 040c 	add.w	r4, r7, #12
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{GPIOA, GPIO_PIN_1},
		{GPIOA, GPIO_PIN_4},
 		{GPIOB, GPIO_PIN_0}
	};

	static Keypad keypad(rowPins, columnPins);
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <main+0x200>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f3bf 8f5b 	dmb	ish
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf0c      	ite	eq
 8000f62:	2301      	moveq	r3, #1
 8000f64:	2300      	movne	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d015      	beq.n	8000f98 <main+0x180>
 8000f6c:	482a      	ldr	r0, [pc, #168]	; (8001018 <main+0x200>)
 8000f6e:	f000 fbe2 	bl	8001736 <__cxa_guard_acquire>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <main+0x180>
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <main+0x204>)
 8000f8e:	f7ff fc59 	bl	8000844 <_ZN6KeypadC1EP11pinStruct_tS1_>
 8000f92:	4821      	ldr	r0, [pc, #132]	; (8001018 <main+0x200>)
 8000f94:	f000 fbdb 	bl	800174e <__cxa_guard_release>

	// Game Startup
	Game_DisplayIntro(&lcd);
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <main+0x1f4>)
 8000f9a:	f7ff fa91 	bl	80004c0 <_Z17Game_DisplayIntroP3LCD>
	HAL_Delay(1500);
 8000f9e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fa2:	f000 f8f9 	bl	8001198 <HAL_Delay>
	Game_DisplayMenu(&lcd);
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <main+0x1f4>)
 8000fa8:	f7ff fac2 	bl	8000530 <_Z16Game_DisplayMenuP3LCD>

	while(1)
	{
		char pressedKey = keypad.GetCharShortPress();
 8000fac:	481b      	ldr	r0, [pc, #108]	; (800101c <main+0x204>)
 8000fae:	f7ff fd13 	bl	80009d8 <_ZN6Keypad17GetCharShortPressEv>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		switch (pressedKey)
 8000fb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000fbc:	2b42      	cmp	r3, #66	; 0x42
 8000fbe:	d00a      	beq.n	8000fd6 <main+0x1be>
 8000fc0:	2b42      	cmp	r3, #66	; 0x42
 8000fc2:	dc10      	bgt.n	8000fe6 <main+0x1ce>
 8000fc4:	2b23      	cmp	r3, #35	; 0x23
 8000fc6:	d00a      	beq.n	8000fde <main+0x1c6>
 8000fc8:	2b41      	cmp	r3, #65	; 0x41
 8000fca:	d10c      	bne.n	8000fe6 <main+0x1ce>
		{
			case 'A':
				Game_Start(&lcd, &keypad);
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <main+0x204>)
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <main+0x1f4>)
 8000fd0:	f7ff fb50 	bl	8000674 <_Z10Game_StartP3LCDP6Keypad>
				break;
 8000fd4:	e008      	b.n	8000fe8 <main+0x1d0>
			case 'B':
				Game_DisplayMenu(&lcd);
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <main+0x1f4>)
 8000fd8:	f7ff faaa 	bl	8000530 <_Z16Game_DisplayMenuP3LCD>
				break;
 8000fdc:	e004      	b.n	8000fe8 <main+0x1d0>
			case '#':
				Game_DisplayRules(&lcd);
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <main+0x1f4>)
 8000fe0:	f7ff fade 	bl	80005a0 <_Z17Game_DisplayRulesP3LCD>
				break;
 8000fe4:	e000      	b.n	8000fe8 <main+0x1d0>
			default:
				break;
 8000fe6:	bf00      	nop
		}
	}
 8000fe8:	e7e0      	b.n	8000fac <main+0x194>
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	08001914 	.word	0x08001914
 8000ff4:	0800191c 	.word	0x0800191c
 8000ff8:	08001924 	.word	0x08001924
 8000ffc:	0800192c 	.word	0x0800192c
 8001000:	08001934 	.word	0x08001934
 8001004:	0800193c 	.word	0x0800193c
 8001008:	20000068 	.word	0x20000068
 800100c:	20000038 	.word	0x20000038
 8001010:	08001944 	.word	0x08001944
 8001014:	08001964 	.word	0x08001964
 8001018:	20000084 	.word	0x20000084
 800101c:	2000006c 	.word	0x2000006c

08001020 <SysTick_Handler>:
}

extern "C" void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001024:	f000 f898 	bl	8001158 <HAL_IncTick>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f000 fb69 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fec9 	bl	8000e18 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001094:	080019ec 	.word	0x080019ec
  ldr r2, =_sbss
 8001098:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800109c:	2000008c 	.word	0x2000008c

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f939 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f000 f810 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f000 f806 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f93b 	bl	8001392 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f911 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000014 	.word	0x20000014
 8001154:	20000010 	.word	0x20000010

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000014 	.word	0x20000014
 800117c:	20000088 	.word	0x20000088

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000088 	.word	0x20000088

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000014 	.word	0x20000014

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff47 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5c 	bl	8001228 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb0 	bl	8001300 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	e165      	b.n	8001694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8154 	bne.w	800168e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d005      	beq.n	80013fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d130      	bne.n	8001460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 0201 	and.w	r2, r3, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b03      	cmp	r3, #3
 800146a:	d017      	beq.n	800149c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d123      	bne.n	80014f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80ae 	beq.w	800168e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a5c      	ldr	r2, [pc, #368]	; (80016ac <HAL_GPIO_Init+0x300>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154e:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_GPIO_Init+0x304>)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x308>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d025      	beq.n	80015c6 <HAL_GPIO_Init+0x21a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_GPIO_Init+0x30c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01f      	beq.n	80015c2 <HAL_GPIO_Init+0x216>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x310>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x212>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x314>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_GPIO_Init+0x318>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x20a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <HAL_GPIO_Init+0x31c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x206>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a49      	ldr	r2, [pc, #292]	; (80016cc <HAL_GPIO_Init+0x320>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x202>
 80015aa:	2306      	movs	r3, #6
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x21c>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x304>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_GPIO_Init+0x324>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_GPIO_Init+0x324>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_GPIO_Init+0x324>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_GPIO_Init+0x324>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_GPIO_Init+0x324>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <HAL_GPIO_Init+0x324>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_GPIO_Init+0x324>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_GPIO_Init+0x324>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae96 	bls.w	80013c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e001      	b.n	80016f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <__cxa_guard_acquire>:
 8001736:	6803      	ldr	r3, [r0, #0]
 8001738:	07db      	lsls	r3, r3, #31
 800173a:	d406      	bmi.n	800174a <__cxa_guard_acquire+0x14>
 800173c:	7843      	ldrb	r3, [r0, #1]
 800173e:	b103      	cbz	r3, 8001742 <__cxa_guard_acquire+0xc>
 8001740:	deff      	udf	#255	; 0xff
 8001742:	2301      	movs	r3, #1
 8001744:	7043      	strb	r3, [r0, #1]
 8001746:	4618      	mov	r0, r3
 8001748:	4770      	bx	lr
 800174a:	2000      	movs	r0, #0
 800174c:	4770      	bx	lr

0800174e <__cxa_guard_release>:
 800174e:	2301      	movs	r3, #1
 8001750:	6003      	str	r3, [r0, #0]
 8001752:	4770      	bx	lr

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4d0d      	ldr	r5, [pc, #52]	; (800178c <__libc_init_array+0x38>)
 8001758:	4c0d      	ldr	r4, [pc, #52]	; (8001790 <__libc_init_array+0x3c>)
 800175a:	1b64      	subs	r4, r4, r5
 800175c:	10a4      	asrs	r4, r4, #2
 800175e:	2600      	movs	r6, #0
 8001760:	42a6      	cmp	r6, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	4d0b      	ldr	r5, [pc, #44]	; (8001794 <__libc_init_array+0x40>)
 8001766:	4c0c      	ldr	r4, [pc, #48]	; (8001798 <__libc_init_array+0x44>)
 8001768:	f000 f820 	bl	80017ac <_init>
 800176c:	1b64      	subs	r4, r4, r5
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	2600      	movs	r6, #0
 8001772:	42a6      	cmp	r6, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	f855 3b04 	ldr.w	r3, [r5], #4
 800177c:	4798      	blx	r3
 800177e:	3601      	adds	r6, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	f855 3b04 	ldr.w	r3, [r5], #4
 8001786:	4798      	blx	r3
 8001788:	3601      	adds	r6, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	080019e4 	.word	0x080019e4
 8001790:	080019e4 	.word	0x080019e4
 8001794:	080019e4 	.word	0x080019e4
 8001798:	080019e8 	.word	0x080019e8

0800179c <memset>:
 800179c:	4402      	add	r2, r0
 800179e:	4603      	mov	r3, r0
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d100      	bne.n	80017a6 <memset+0xa>
 80017a4:	4770      	bx	lr
 80017a6:	f803 1b01 	strb.w	r1, [r3], #1
 80017aa:	e7f9      	b.n	80017a0 <memset+0x4>

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
